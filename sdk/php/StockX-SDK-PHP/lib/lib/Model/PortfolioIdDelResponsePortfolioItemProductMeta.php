<?php
/**
 * PortfolioIdDelResponsePortfolioItemProductMeta
 *
 * PHP version 5
 *
 * @category Class
 * @package  StockX\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * StockX API
 *
 * Provides access to StockX's public services, allowing end users to query for product and order information.
 *
 * OpenAPI spec version: final32218.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace StockX\Client\Model;

use \ArrayAccess;
use \StockX\Client\ObjectSerializer;

/**
 * PortfolioIdDelResponsePortfolioItemProductMeta Class Doc Comment
 *
 * @category Class
 * @package  StockX\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PortfolioIdDelResponsePortfolioItemProductMeta implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'portfolio_id_del_response_PortfolioItem_product_meta';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'charity' => 'bool',
        'raffle' => 'bool',
        'mobile_only' => 'bool',
        'restock' => 'bool',
        'deleted' => 'bool',
        'hidden' => 'bool',
        'lock_buying' => 'bool',
        'lock_selling' => 'bool',
        'redirected' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'charity' => null,
        'raffle' => null,
        'mobile_only' => null,
        'restock' => null,
        'deleted' => null,
        'hidden' => null,
        'lock_buying' => null,
        'lock_selling' => null,
        'redirected' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'charity' => 'charity',
        'raffle' => 'raffle',
        'mobile_only' => 'mobile_only',
        'restock' => 'restock',
        'deleted' => 'deleted',
        'hidden' => 'hidden',
        'lock_buying' => 'lock_buying',
        'lock_selling' => 'lock_selling',
        'redirected' => 'redirected'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'charity' => 'setCharity',
        'raffle' => 'setRaffle',
        'mobile_only' => 'setMobileOnly',
        'restock' => 'setRestock',
        'deleted' => 'setDeleted',
        'hidden' => 'setHidden',
        'lock_buying' => 'setLockBuying',
        'lock_selling' => 'setLockSelling',
        'redirected' => 'setRedirected'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'charity' => 'getCharity',
        'raffle' => 'getRaffle',
        'mobile_only' => 'getMobileOnly',
        'restock' => 'getRestock',
        'deleted' => 'getDeleted',
        'hidden' => 'getHidden',
        'lock_buying' => 'getLockBuying',
        'lock_selling' => 'getLockSelling',
        'redirected' => 'getRedirected'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['charity'] = isset($data['charity']) ? $data['charity'] : null;
        $this->container['raffle'] = isset($data['raffle']) ? $data['raffle'] : null;
        $this->container['mobile_only'] = isset($data['mobile_only']) ? $data['mobile_only'] : null;
        $this->container['restock'] = isset($data['restock']) ? $data['restock'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
        $this->container['lock_buying'] = isset($data['lock_buying']) ? $data['lock_buying'] : null;
        $this->container['lock_selling'] = isset($data['lock_selling']) ? $data['lock_selling'] : null;
        $this->container['redirected'] = isset($data['redirected']) ? $data['redirected'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['charity'] === null) {
            $invalidProperties[] = "'charity' can't be null";
        }
        if ($this->container['raffle'] === null) {
            $invalidProperties[] = "'raffle' can't be null";
        }
        if ($this->container['mobile_only'] === null) {
            $invalidProperties[] = "'mobile_only' can't be null";
        }
        if ($this->container['restock'] === null) {
            $invalidProperties[] = "'restock' can't be null";
        }
        if ($this->container['deleted'] === null) {
            $invalidProperties[] = "'deleted' can't be null";
        }
        if ($this->container['hidden'] === null) {
            $invalidProperties[] = "'hidden' can't be null";
        }
        if ($this->container['lock_buying'] === null) {
            $invalidProperties[] = "'lock_buying' can't be null";
        }
        if ($this->container['lock_selling'] === null) {
            $invalidProperties[] = "'lock_selling' can't be null";
        }
        if ($this->container['redirected'] === null) {
            $invalidProperties[] = "'redirected' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['charity'] === null) {
            return false;
        }
        if ($this->container['raffle'] === null) {
            return false;
        }
        if ($this->container['mobile_only'] === null) {
            return false;
        }
        if ($this->container['restock'] === null) {
            return false;
        }
        if ($this->container['deleted'] === null) {
            return false;
        }
        if ($this->container['hidden'] === null) {
            return false;
        }
        if ($this->container['lock_buying'] === null) {
            return false;
        }
        if ($this->container['lock_selling'] === null) {
            return false;
        }
        if ($this->container['redirected'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets charity
     *
     * @return bool
     */
    public function getCharity()
    {
        return $this->container['charity'];
    }

    /**
     * Sets charity
     *
     * @param bool $charity charity
     *
     * @return $this
     */
    public function setCharity($charity)
    {
        $this->container['charity'] = $charity;

        return $this;
    }

    /**
     * Gets raffle
     *
     * @return bool
     */
    public function getRaffle()
    {
        return $this->container['raffle'];
    }

    /**
     * Sets raffle
     *
     * @param bool $raffle raffle
     *
     * @return $this
     */
    public function setRaffle($raffle)
    {
        $this->container['raffle'] = $raffle;

        return $this;
    }

    /**
     * Gets mobile_only
     *
     * @return bool
     */
    public function getMobileOnly()
    {
        return $this->container['mobile_only'];
    }

    /**
     * Sets mobile_only
     *
     * @param bool $mobile_only mobile_only
     *
     * @return $this
     */
    public function setMobileOnly($mobile_only)
    {
        $this->container['mobile_only'] = $mobile_only;

        return $this;
    }

    /**
     * Gets restock
     *
     * @return bool
     */
    public function getRestock()
    {
        return $this->container['restock'];
    }

    /**
     * Sets restock
     *
     * @param bool $restock restock
     *
     * @return $this
     */
    public function setRestock($restock)
    {
        $this->container['restock'] = $restock;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool $hidden hidden
     *
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets lock_buying
     *
     * @return bool
     */
    public function getLockBuying()
    {
        return $this->container['lock_buying'];
    }

    /**
     * Sets lock_buying
     *
     * @param bool $lock_buying lock_buying
     *
     * @return $this
     */
    public function setLockBuying($lock_buying)
    {
        $this->container['lock_buying'] = $lock_buying;

        return $this;
    }

    /**
     * Gets lock_selling
     *
     * @return bool
     */
    public function getLockSelling()
    {
        return $this->container['lock_selling'];
    }

    /**
     * Sets lock_selling
     *
     * @param bool $lock_selling lock_selling
     *
     * @return $this
     */
    public function setLockSelling($lock_selling)
    {
        $this->container['lock_selling'] = $lock_selling;

        return $this;
    }

    /**
     * Gets redirected
     *
     * @return bool
     */
    public function getRedirected()
    {
        return $this->container['redirected'];
    }

    /**
     * Sets redirected
     *
     * @param bool $redirected redirected
     *
     * @return $this
     */
    public function setRedirected($redirected)
    {
        $this->container['redirected'] = $redirected;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


