<?php
/**
 * SearchHit
 *
 * PHP version 5
 *
 * @category Class
 * @package  StockX\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * StockX API
 *
 * Provides access to StockX's public services, allowing end users to query for product and order information.
 *
 * OpenAPI spec version: final32218.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace StockX\Client\Model;

use \ArrayAccess;
use \StockX\Client\ObjectSerializer;

/**
 * SearchHit Class Doc Comment
 *
 * @category Class
 * @package  StockX\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchHit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchHit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'brand' => 'string',
        'thumbnail_url' => 'string',
        'media' => '\StockX\Client\Model\SearchHitMedia',
        'url' => 'string',
        'release_date' => 'string',
        'categories' => 'string[]',
        'product_category' => 'string',
        'ticker_symbol' => 'string',
        'style_id' => 'string',
        'make' => 'string',
        'model' => 'string',
        'short_description' => 'string',
        'gender' => 'string',
        'colorway' => 'string',
        'price' => 'int',
        'description' => 'string',
        'highest_bid' => 'string',
        'total_dollars' => 'string',
        'lowest_ask' => 'string',
        'last_sale' => 'string',
        'sales_last_72' => 'int',
        'deadstock_sold' => 'int',
        'quality_bid' => 'int',
        'active' => 'int',
        'new_release' => 'string',
        'searchable_traits' => '\StockX\Client\Model\SearchHitSearchableTraits',
        'object_id' => 'string',
        'annual_high' => 'string',
        'annual_low' => 'string',
        'deadstock_range_low' => 'string',
        'deadstock_range_high' => 'string',
        'average_deadstock_price' => 'string',
        'change_value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'brand' => null,
        'thumbnail_url' => null,
        'media' => null,
        'url' => null,
        'release_date' => null,
        'categories' => null,
        'product_category' => null,
        'ticker_symbol' => null,
        'style_id' => null,
        'make' => null,
        'model' => null,
        'short_description' => null,
        'gender' => null,
        'colorway' => null,
        'price' => null,
        'description' => null,
        'highest_bid' => null,
        'total_dollars' => null,
        'lowest_ask' => null,
        'last_sale' => null,
        'sales_last_72' => null,
        'deadstock_sold' => null,
        'quality_bid' => null,
        'active' => null,
        'new_release' => null,
        'searchable_traits' => null,
        'object_id' => null,
        'annual_high' => null,
        'annual_low' => null,
        'deadstock_range_low' => null,
        'deadstock_range_high' => null,
        'average_deadstock_price' => null,
        'change_value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'brand' => 'brand',
        'thumbnail_url' => 'thumbnail_url',
        'media' => 'media',
        'url' => 'url',
        'release_date' => 'release_date',
        'categories' => 'categories',
        'product_category' => 'product_category',
        'ticker_symbol' => 'ticker_symbol',
        'style_id' => 'style_id',
        'make' => 'make',
        'model' => 'model',
        'short_description' => 'short_description',
        'gender' => 'gender',
        'colorway' => 'colorway',
        'price' => 'price',
        'description' => 'description',
        'highest_bid' => 'highest_bid',
        'total_dollars' => 'total_dollars',
        'lowest_ask' => 'lowest_ask',
        'last_sale' => 'last_sale',
        'sales_last_72' => 'sales_last_72',
        'deadstock_sold' => 'deadstock_sold',
        'quality_bid' => 'quality_bid',
        'active' => 'active',
        'new_release' => 'new_release',
        'searchable_traits' => 'searchable_traits',
        'object_id' => 'objectID',
        'annual_high' => 'annual_high',
        'annual_low' => 'annual_low',
        'deadstock_range_low' => 'deadstock_range_low',
        'deadstock_range_high' => 'deadstock_range_high',
        'average_deadstock_price' => 'average_deadstock_price',
        'change_value' => 'change_value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'brand' => 'setBrand',
        'thumbnail_url' => 'setThumbnailUrl',
        'media' => 'setMedia',
        'url' => 'setUrl',
        'release_date' => 'setReleaseDate',
        'categories' => 'setCategories',
        'product_category' => 'setProductCategory',
        'ticker_symbol' => 'setTickerSymbol',
        'style_id' => 'setStyleId',
        'make' => 'setMake',
        'model' => 'setModel',
        'short_description' => 'setShortDescription',
        'gender' => 'setGender',
        'colorway' => 'setColorway',
        'price' => 'setPrice',
        'description' => 'setDescription',
        'highest_bid' => 'setHighestBid',
        'total_dollars' => 'setTotalDollars',
        'lowest_ask' => 'setLowestAsk',
        'last_sale' => 'setLastSale',
        'sales_last_72' => 'setSalesLast72',
        'deadstock_sold' => 'setDeadstockSold',
        'quality_bid' => 'setQualityBid',
        'active' => 'setActive',
        'new_release' => 'setNewRelease',
        'searchable_traits' => 'setSearchableTraits',
        'object_id' => 'setObjectId',
        'annual_high' => 'setAnnualHigh',
        'annual_low' => 'setAnnualLow',
        'deadstock_range_low' => 'setDeadstockRangeLow',
        'deadstock_range_high' => 'setDeadstockRangeHigh',
        'average_deadstock_price' => 'setAverageDeadstockPrice',
        'change_value' => 'setChangeValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'brand' => 'getBrand',
        'thumbnail_url' => 'getThumbnailUrl',
        'media' => 'getMedia',
        'url' => 'getUrl',
        'release_date' => 'getReleaseDate',
        'categories' => 'getCategories',
        'product_category' => 'getProductCategory',
        'ticker_symbol' => 'getTickerSymbol',
        'style_id' => 'getStyleId',
        'make' => 'getMake',
        'model' => 'getModel',
        'short_description' => 'getShortDescription',
        'gender' => 'getGender',
        'colorway' => 'getColorway',
        'price' => 'getPrice',
        'description' => 'getDescription',
        'highest_bid' => 'getHighestBid',
        'total_dollars' => 'getTotalDollars',
        'lowest_ask' => 'getLowestAsk',
        'last_sale' => 'getLastSale',
        'sales_last_72' => 'getSalesLast72',
        'deadstock_sold' => 'getDeadstockSold',
        'quality_bid' => 'getQualityBid',
        'active' => 'getActive',
        'new_release' => 'getNewRelease',
        'searchable_traits' => 'getSearchableTraits',
        'object_id' => 'getObjectId',
        'annual_high' => 'getAnnualHigh',
        'annual_low' => 'getAnnualLow',
        'deadstock_range_low' => 'getDeadstockRangeLow',
        'deadstock_range_high' => 'getDeadstockRangeHigh',
        'average_deadstock_price' => 'getAverageDeadstockPrice',
        'change_value' => 'getChangeValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['thumbnail_url'] = isset($data['thumbnail_url']) ? $data['thumbnail_url'] : null;
        $this->container['media'] = isset($data['media']) ? $data['media'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['release_date'] = isset($data['release_date']) ? $data['release_date'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['product_category'] = isset($data['product_category']) ? $data['product_category'] : null;
        $this->container['ticker_symbol'] = isset($data['ticker_symbol']) ? $data['ticker_symbol'] : null;
        $this->container['style_id'] = isset($data['style_id']) ? $data['style_id'] : null;
        $this->container['make'] = isset($data['make']) ? $data['make'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['colorway'] = isset($data['colorway']) ? $data['colorway'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['highest_bid'] = isset($data['highest_bid']) ? $data['highest_bid'] : null;
        $this->container['total_dollars'] = isset($data['total_dollars']) ? $data['total_dollars'] : null;
        $this->container['lowest_ask'] = isset($data['lowest_ask']) ? $data['lowest_ask'] : null;
        $this->container['last_sale'] = isset($data['last_sale']) ? $data['last_sale'] : null;
        $this->container['sales_last_72'] = isset($data['sales_last_72']) ? $data['sales_last_72'] : null;
        $this->container['deadstock_sold'] = isset($data['deadstock_sold']) ? $data['deadstock_sold'] : null;
        $this->container['quality_bid'] = isset($data['quality_bid']) ? $data['quality_bid'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['new_release'] = isset($data['new_release']) ? $data['new_release'] : null;
        $this->container['searchable_traits'] = isset($data['searchable_traits']) ? $data['searchable_traits'] : null;
        $this->container['object_id'] = isset($data['object_id']) ? $data['object_id'] : null;
        $this->container['annual_high'] = isset($data['annual_high']) ? $data['annual_high'] : null;
        $this->container['annual_low'] = isset($data['annual_low']) ? $data['annual_low'] : null;
        $this->container['deadstock_range_low'] = isset($data['deadstock_range_low']) ? $data['deadstock_range_low'] : null;
        $this->container['deadstock_range_high'] = isset($data['deadstock_range_high']) ? $data['deadstock_range_high'] : null;
        $this->container['average_deadstock_price'] = isset($data['average_deadstock_price']) ? $data['average_deadstock_price'] : null;
        $this->container['change_value'] = isset($data['change_value']) ? $data['change_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string $brand brand
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets thumbnail_url
     *
     * @return string
     */
    public function getThumbnailUrl()
    {
        return $this->container['thumbnail_url'];
    }

    /**
     * Sets thumbnail_url
     *
     * @param string $thumbnail_url thumbnail_url
     *
     * @return $this
     */
    public function setThumbnailUrl($thumbnail_url)
    {
        $this->container['thumbnail_url'] = $thumbnail_url;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \StockX\Client\Model\SearchHitMedia
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \StockX\Client\Model\SearchHitMedia $media media
     *
     * @return $this
     */
    public function setMedia($media)
    {
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets release_date
     *
     * @return string
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     *
     * @param string $release_date release_date
     *
     * @return $this
     */
    public function setReleaseDate($release_date)
    {
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[] $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets product_category
     *
     * @return string
     */
    public function getProductCategory()
    {
        return $this->container['product_category'];
    }

    /**
     * Sets product_category
     *
     * @param string $product_category product_category
     *
     * @return $this
     */
    public function setProductCategory($product_category)
    {
        $this->container['product_category'] = $product_category;

        return $this;
    }

    /**
     * Gets ticker_symbol
     *
     * @return string
     */
    public function getTickerSymbol()
    {
        return $this->container['ticker_symbol'];
    }

    /**
     * Sets ticker_symbol
     *
     * @param string $ticker_symbol ticker_symbol
     *
     * @return $this
     */
    public function setTickerSymbol($ticker_symbol)
    {
        $this->container['ticker_symbol'] = $ticker_symbol;

        return $this;
    }

    /**
     * Gets style_id
     *
     * @return string
     */
    public function getStyleId()
    {
        return $this->container['style_id'];
    }

    /**
     * Sets style_id
     *
     * @param string $style_id style_id
     *
     * @return $this
     */
    public function setStyleId($style_id)
    {
        $this->container['style_id'] = $style_id;

        return $this;
    }

    /**
     * Gets make
     *
     * @return string
     */
    public function getMake()
    {
        return $this->container['make'];
    }

    /**
     * Sets make
     *
     * @param string $make make
     *
     * @return $this
     */
    public function setMake($make)
    {
        $this->container['make'] = $make;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description short_description
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets colorway
     *
     * @return string
     */
    public function getColorway()
    {
        return $this->container['colorway'];
    }

    /**
     * Sets colorway
     *
     * @param string $colorway colorway
     *
     * @return $this
     */
    public function setColorway($colorway)
    {
        $this->container['colorway'] = $colorway;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets highest_bid
     *
     * @return string
     */
    public function getHighestBid()
    {
        return $this->container['highest_bid'];
    }

    /**
     * Sets highest_bid
     *
     * @param string $highest_bid highest_bid
     *
     * @return $this
     */
    public function setHighestBid($highest_bid)
    {
        $this->container['highest_bid'] = $highest_bid;

        return $this;
    }

    /**
     * Gets total_dollars
     *
     * @return string
     */
    public function getTotalDollars()
    {
        return $this->container['total_dollars'];
    }

    /**
     * Sets total_dollars
     *
     * @param string $total_dollars total_dollars
     *
     * @return $this
     */
    public function setTotalDollars($total_dollars)
    {
        $this->container['total_dollars'] = $total_dollars;

        return $this;
    }

    /**
     * Gets lowest_ask
     *
     * @return string
     */
    public function getLowestAsk()
    {
        return $this->container['lowest_ask'];
    }

    /**
     * Sets lowest_ask
     *
     * @param string $lowest_ask lowest_ask
     *
     * @return $this
     */
    public function setLowestAsk($lowest_ask)
    {
        $this->container['lowest_ask'] = $lowest_ask;

        return $this;
    }

    /**
     * Gets last_sale
     *
     * @return string
     */
    public function getLastSale()
    {
        return $this->container['last_sale'];
    }

    /**
     * Sets last_sale
     *
     * @param string $last_sale last_sale
     *
     * @return $this
     */
    public function setLastSale($last_sale)
    {
        $this->container['last_sale'] = $last_sale;

        return $this;
    }

    /**
     * Gets sales_last_72
     *
     * @return int
     */
    public function getSalesLast72()
    {
        return $this->container['sales_last_72'];
    }

    /**
     * Sets sales_last_72
     *
     * @param int $sales_last_72 sales_last_72
     *
     * @return $this
     */
    public function setSalesLast72($sales_last_72)
    {
        $this->container['sales_last_72'] = $sales_last_72;

        return $this;
    }

    /**
     * Gets deadstock_sold
     *
     * @return int
     */
    public function getDeadstockSold()
    {
        return $this->container['deadstock_sold'];
    }

    /**
     * Sets deadstock_sold
     *
     * @param int $deadstock_sold deadstock_sold
     *
     * @return $this
     */
    public function setDeadstockSold($deadstock_sold)
    {
        $this->container['deadstock_sold'] = $deadstock_sold;

        return $this;
    }

    /**
     * Gets quality_bid
     *
     * @return int
     */
    public function getQualityBid()
    {
        return $this->container['quality_bid'];
    }

    /**
     * Sets quality_bid
     *
     * @param int $quality_bid quality_bid
     *
     * @return $this
     */
    public function setQualityBid($quality_bid)
    {
        $this->container['quality_bid'] = $quality_bid;

        return $this;
    }

    /**
     * Gets active
     *
     * @return int
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param int $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets new_release
     *
     * @return string
     */
    public function getNewRelease()
    {
        return $this->container['new_release'];
    }

    /**
     * Sets new_release
     *
     * @param string $new_release new_release
     *
     * @return $this
     */
    public function setNewRelease($new_release)
    {
        $this->container['new_release'] = $new_release;

        return $this;
    }

    /**
     * Gets searchable_traits
     *
     * @return \StockX\Client\Model\SearchHitSearchableTraits
     */
    public function getSearchableTraits()
    {
        return $this->container['searchable_traits'];
    }

    /**
     * Sets searchable_traits
     *
     * @param \StockX\Client\Model\SearchHitSearchableTraits $searchable_traits searchable_traits
     *
     * @return $this
     */
    public function setSearchableTraits($searchable_traits)
    {
        $this->container['searchable_traits'] = $searchable_traits;

        return $this;
    }

    /**
     * Gets object_id
     *
     * @return string
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     *
     * @param string $object_id object_id
     *
     * @return $this
     */
    public function setObjectId($object_id)
    {
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets annual_high
     *
     * @return string
     */
    public function getAnnualHigh()
    {
        return $this->container['annual_high'];
    }

    /**
     * Sets annual_high
     *
     * @param string $annual_high annual_high
     *
     * @return $this
     */
    public function setAnnualHigh($annual_high)
    {
        $this->container['annual_high'] = $annual_high;

        return $this;
    }

    /**
     * Gets annual_low
     *
     * @return string
     */
    public function getAnnualLow()
    {
        return $this->container['annual_low'];
    }

    /**
     * Sets annual_low
     *
     * @param string $annual_low annual_low
     *
     * @return $this
     */
    public function setAnnualLow($annual_low)
    {
        $this->container['annual_low'] = $annual_low;

        return $this;
    }

    /**
     * Gets deadstock_range_low
     *
     * @return string
     */
    public function getDeadstockRangeLow()
    {
        return $this->container['deadstock_range_low'];
    }

    /**
     * Sets deadstock_range_low
     *
     * @param string $deadstock_range_low deadstock_range_low
     *
     * @return $this
     */
    public function setDeadstockRangeLow($deadstock_range_low)
    {
        $this->container['deadstock_range_low'] = $deadstock_range_low;

        return $this;
    }

    /**
     * Gets deadstock_range_high
     *
     * @return string
     */
    public function getDeadstockRangeHigh()
    {
        return $this->container['deadstock_range_high'];
    }

    /**
     * Sets deadstock_range_high
     *
     * @param string $deadstock_range_high deadstock_range_high
     *
     * @return $this
     */
    public function setDeadstockRangeHigh($deadstock_range_high)
    {
        $this->container['deadstock_range_high'] = $deadstock_range_high;

        return $this;
    }

    /**
     * Gets average_deadstock_price
     *
     * @return string
     */
    public function getAverageDeadstockPrice()
    {
        return $this->container['average_deadstock_price'];
    }

    /**
     * Sets average_deadstock_price
     *
     * @param string $average_deadstock_price average_deadstock_price
     *
     * @return $this
     */
    public function setAverageDeadstockPrice($average_deadstock_price)
    {
        $this->container['average_deadstock_price'] = $average_deadstock_price;

        return $this;
    }

    /**
     * Gets change_value
     *
     * @return string
     */
    public function getChangeValue()
    {
        return $this->container['change_value'];
    }

    /**
     * Sets change_value
     *
     * @param string $change_value change_value
     *
     * @return $this
     */
    public function setChangeValue($change_value)
    {
        $this->container['change_value'] = $change_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


