<?php
/**
 * PortfolioIdDelResponsePortfolioItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  StockX\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * StockX API
 *
 * Provides access to StockX's public services, allowing end users to query for product and order information.
 *
 * OpenAPI spec version: final32218.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace StockX\Client\Model;

use \ArrayAccess;
use \StockX\Client\ObjectSerializer;

/**
 * PortfolioIdDelResponsePortfolioItem Class Doc Comment
 *
 * @category Class
 * @package  StockX\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PortfolioIdDelResponsePortfolioItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'portfolio_id_del_response_PortfolioItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'chain_id' => 'string',
        'customer_id' => 'int',
        'inventory_id' => 'string',
        'product_id' => 'string',
        'sku_uuid' => 'string',
        'merchant_id' => 'int',
        'condition' => 'int',
        'action' => 'int',
        'action_by' => 'int',
        'amount' => 'int',
        'expires_at' => 'string',
        'expires_at_time' => 'int',
        'gain_loss_dollars' => 'int',
        'gain_loss_percentage' => 'int',
        'market_value' => 'string',
        'matched_state' => 'int',
        'purchase_date' => 'string',
        'purchase_date_time' => 'int',
        'state' => 'int',
        'text' => 'string',
        'notes' => 'string',
        'created_at_time' => 'int',
        'can_edit' => 'bool',
        'can_delete' => 'bool',
        'tracking' => '\StockX\Client\Model\PortfolioIdDelResponsePortfolioItemTracking',
        'meta' => 'object',
        'product' => '\StockX\Client\Model\PortfolioIdDelResponsePortfolioItemProduct',
        'merchant' => '\StockX\Client\Model\PortfolioIdDelResponsePortfolioItemMerchant'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'chain_id' => null,
        'customer_id' => null,
        'inventory_id' => null,
        'product_id' => null,
        'sku_uuid' => null,
        'merchant_id' => null,
        'condition' => null,
        'action' => null,
        'action_by' => null,
        'amount' => null,
        'expires_at' => null,
        'expires_at_time' => null,
        'gain_loss_dollars' => null,
        'gain_loss_percentage' => null,
        'market_value' => null,
        'matched_state' => null,
        'purchase_date' => null,
        'purchase_date_time' => null,
        'state' => null,
        'text' => null,
        'notes' => null,
        'created_at_time' => null,
        'can_edit' => null,
        'can_delete' => null,
        'tracking' => null,
        'meta' => null,
        'product' => null,
        'merchant' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'chain_id' => 'chainId',
        'customer_id' => 'customerId',
        'inventory_id' => 'inventoryId',
        'product_id' => 'productId',
        'sku_uuid' => 'skuUuid',
        'merchant_id' => 'merchantId',
        'condition' => 'condition',
        'action' => 'action',
        'action_by' => 'actionBy',
        'amount' => 'amount',
        'expires_at' => 'expiresAt',
        'expires_at_time' => 'expiresAtTime',
        'gain_loss_dollars' => 'gainLossDollars',
        'gain_loss_percentage' => 'gainLossPercentage',
        'market_value' => 'marketValue',
        'matched_state' => 'matchedState',
        'purchase_date' => 'purchaseDate',
        'purchase_date_time' => 'purchaseDateTime',
        'state' => 'state',
        'text' => 'text',
        'notes' => 'notes',
        'created_at_time' => 'createdAtTime',
        'can_edit' => 'canEdit',
        'can_delete' => 'canDelete',
        'tracking' => 'Tracking',
        'meta' => 'meta',
        'product' => 'product',
        'merchant' => 'Merchant'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'chain_id' => 'setChainId',
        'customer_id' => 'setCustomerId',
        'inventory_id' => 'setInventoryId',
        'product_id' => 'setProductId',
        'sku_uuid' => 'setSkuUuid',
        'merchant_id' => 'setMerchantId',
        'condition' => 'setCondition',
        'action' => 'setAction',
        'action_by' => 'setActionBy',
        'amount' => 'setAmount',
        'expires_at' => 'setExpiresAt',
        'expires_at_time' => 'setExpiresAtTime',
        'gain_loss_dollars' => 'setGainLossDollars',
        'gain_loss_percentage' => 'setGainLossPercentage',
        'market_value' => 'setMarketValue',
        'matched_state' => 'setMatchedState',
        'purchase_date' => 'setPurchaseDate',
        'purchase_date_time' => 'setPurchaseDateTime',
        'state' => 'setState',
        'text' => 'setText',
        'notes' => 'setNotes',
        'created_at_time' => 'setCreatedAtTime',
        'can_edit' => 'setCanEdit',
        'can_delete' => 'setCanDelete',
        'tracking' => 'setTracking',
        'meta' => 'setMeta',
        'product' => 'setProduct',
        'merchant' => 'setMerchant'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'chain_id' => 'getChainId',
        'customer_id' => 'getCustomerId',
        'inventory_id' => 'getInventoryId',
        'product_id' => 'getProductId',
        'sku_uuid' => 'getSkuUuid',
        'merchant_id' => 'getMerchantId',
        'condition' => 'getCondition',
        'action' => 'getAction',
        'action_by' => 'getActionBy',
        'amount' => 'getAmount',
        'expires_at' => 'getExpiresAt',
        'expires_at_time' => 'getExpiresAtTime',
        'gain_loss_dollars' => 'getGainLossDollars',
        'gain_loss_percentage' => 'getGainLossPercentage',
        'market_value' => 'getMarketValue',
        'matched_state' => 'getMatchedState',
        'purchase_date' => 'getPurchaseDate',
        'purchase_date_time' => 'getPurchaseDateTime',
        'state' => 'getState',
        'text' => 'getText',
        'notes' => 'getNotes',
        'created_at_time' => 'getCreatedAtTime',
        'can_edit' => 'getCanEdit',
        'can_delete' => 'getCanDelete',
        'tracking' => 'getTracking',
        'meta' => 'getMeta',
        'product' => 'getProduct',
        'merchant' => 'getMerchant'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['chain_id'] = isset($data['chain_id']) ? $data['chain_id'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['inventory_id'] = isset($data['inventory_id']) ? $data['inventory_id'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['sku_uuid'] = isset($data['sku_uuid']) ? $data['sku_uuid'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['action_by'] = isset($data['action_by']) ? $data['action_by'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['expires_at_time'] = isset($data['expires_at_time']) ? $data['expires_at_time'] : null;
        $this->container['gain_loss_dollars'] = isset($data['gain_loss_dollars']) ? $data['gain_loss_dollars'] : null;
        $this->container['gain_loss_percentage'] = isset($data['gain_loss_percentage']) ? $data['gain_loss_percentage'] : null;
        $this->container['market_value'] = isset($data['market_value']) ? $data['market_value'] : null;
        $this->container['matched_state'] = isset($data['matched_state']) ? $data['matched_state'] : null;
        $this->container['purchase_date'] = isset($data['purchase_date']) ? $data['purchase_date'] : null;
        $this->container['purchase_date_time'] = isset($data['purchase_date_time']) ? $data['purchase_date_time'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['created_at_time'] = isset($data['created_at_time']) ? $data['created_at_time'] : null;
        $this->container['can_edit'] = isset($data['can_edit']) ? $data['can_edit'] : null;
        $this->container['can_delete'] = isset($data['can_delete']) ? $data['can_delete'] : null;
        $this->container['tracking'] = isset($data['tracking']) ? $data['tracking'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['merchant'] = isset($data['merchant']) ? $data['merchant'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['chain_id'] === null) {
            $invalidProperties[] = "'chain_id' can't be null";
        }
        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['inventory_id'] === null) {
            $invalidProperties[] = "'inventory_id' can't be null";
        }
        if ($this->container['product_id'] === null) {
            $invalidProperties[] = "'product_id' can't be null";
        }
        if ($this->container['sku_uuid'] === null) {
            $invalidProperties[] = "'sku_uuid' can't be null";
        }
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['condition'] === null) {
            $invalidProperties[] = "'condition' can't be null";
        }
        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['action_by'] === null) {
            $invalidProperties[] = "'action_by' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['expires_at'] === null) {
            $invalidProperties[] = "'expires_at' can't be null";
        }
        if ($this->container['expires_at_time'] === null) {
            $invalidProperties[] = "'expires_at_time' can't be null";
        }
        if ($this->container['gain_loss_dollars'] === null) {
            $invalidProperties[] = "'gain_loss_dollars' can't be null";
        }
        if ($this->container['gain_loss_percentage'] === null) {
            $invalidProperties[] = "'gain_loss_percentage' can't be null";
        }
        if ($this->container['market_value'] === null) {
            $invalidProperties[] = "'market_value' can't be null";
        }
        if ($this->container['matched_state'] === null) {
            $invalidProperties[] = "'matched_state' can't be null";
        }
        if ($this->container['purchase_date'] === null) {
            $invalidProperties[] = "'purchase_date' can't be null";
        }
        if ($this->container['purchase_date_time'] === null) {
            $invalidProperties[] = "'purchase_date_time' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ($this->container['notes'] === null) {
            $invalidProperties[] = "'notes' can't be null";
        }
        if ($this->container['created_at_time'] === null) {
            $invalidProperties[] = "'created_at_time' can't be null";
        }
        if ($this->container['can_edit'] === null) {
            $invalidProperties[] = "'can_edit' can't be null";
        }
        if ($this->container['can_delete'] === null) {
            $invalidProperties[] = "'can_delete' can't be null";
        }
        if ($this->container['tracking'] === null) {
            $invalidProperties[] = "'tracking' can't be null";
        }
        if ($this->container['meta'] === null) {
            $invalidProperties[] = "'meta' can't be null";
        }
        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        if ($this->container['merchant'] === null) {
            $invalidProperties[] = "'merchant' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['chain_id'] === null) {
            return false;
        }
        if ($this->container['customer_id'] === null) {
            return false;
        }
        if ($this->container['inventory_id'] === null) {
            return false;
        }
        if ($this->container['product_id'] === null) {
            return false;
        }
        if ($this->container['sku_uuid'] === null) {
            return false;
        }
        if ($this->container['merchant_id'] === null) {
            return false;
        }
        if ($this->container['condition'] === null) {
            return false;
        }
        if ($this->container['action'] === null) {
            return false;
        }
        if ($this->container['action_by'] === null) {
            return false;
        }
        if ($this->container['amount'] === null) {
            return false;
        }
        if ($this->container['expires_at'] === null) {
            return false;
        }
        if ($this->container['expires_at_time'] === null) {
            return false;
        }
        if ($this->container['gain_loss_dollars'] === null) {
            return false;
        }
        if ($this->container['gain_loss_percentage'] === null) {
            return false;
        }
        if ($this->container['market_value'] === null) {
            return false;
        }
        if ($this->container['matched_state'] === null) {
            return false;
        }
        if ($this->container['purchase_date'] === null) {
            return false;
        }
        if ($this->container['purchase_date_time'] === null) {
            return false;
        }
        if ($this->container['state'] === null) {
            return false;
        }
        if ($this->container['text'] === null) {
            return false;
        }
        if ($this->container['notes'] === null) {
            return false;
        }
        if ($this->container['created_at_time'] === null) {
            return false;
        }
        if ($this->container['can_edit'] === null) {
            return false;
        }
        if ($this->container['can_delete'] === null) {
            return false;
        }
        if ($this->container['tracking'] === null) {
            return false;
        }
        if ($this->container['meta'] === null) {
            return false;
        }
        if ($this->container['product'] === null) {
            return false;
        }
        if ($this->container['merchant'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets chain_id
     *
     * @return string
     */
    public function getChainId()
    {
        return $this->container['chain_id'];
    }

    /**
     * Sets chain_id
     *
     * @param string $chain_id chain_id
     *
     * @return $this
     */
    public function setChainId($chain_id)
    {
        $this->container['chain_id'] = $chain_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id customer_id
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets inventory_id
     *
     * @return string
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param string $inventory_id inventory_id
     *
     * @return $this
     */
    public function setInventoryId($inventory_id)
    {
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets sku_uuid
     *
     * @return string
     */
    public function getSkuUuid()
    {
        return $this->container['sku_uuid'];
    }

    /**
     * Sets sku_uuid
     *
     * @param string $sku_uuid sku_uuid
     *
     * @return $this
     */
    public function setSkuUuid($sku_uuid)
    {
        $this->container['sku_uuid'] = $sku_uuid;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id merchant_id
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return int
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param int $condition condition
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets action
     *
     * @return int
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param int $action action
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets action_by
     *
     * @return int
     */
    public function getActionBy()
    {
        return $this->container['action_by'];
    }

    /**
     * Sets action_by
     *
     * @param int $action_by action_by
     *
     * @return $this
     */
    public function setActionBy($action_by)
    {
        $this->container['action_by'] = $action_by;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return string
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param string $expires_at expires_at
     *
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets expires_at_time
     *
     * @return int
     */
    public function getExpiresAtTime()
    {
        return $this->container['expires_at_time'];
    }

    /**
     * Sets expires_at_time
     *
     * @param int $expires_at_time expires_at_time
     *
     * @return $this
     */
    public function setExpiresAtTime($expires_at_time)
    {
        $this->container['expires_at_time'] = $expires_at_time;

        return $this;
    }

    /**
     * Gets gain_loss_dollars
     *
     * @return int
     */
    public function getGainLossDollars()
    {
        return $this->container['gain_loss_dollars'];
    }

    /**
     * Sets gain_loss_dollars
     *
     * @param int $gain_loss_dollars gain_loss_dollars
     *
     * @return $this
     */
    public function setGainLossDollars($gain_loss_dollars)
    {
        $this->container['gain_loss_dollars'] = $gain_loss_dollars;

        return $this;
    }

    /**
     * Gets gain_loss_percentage
     *
     * @return int
     */
    public function getGainLossPercentage()
    {
        return $this->container['gain_loss_percentage'];
    }

    /**
     * Sets gain_loss_percentage
     *
     * @param int $gain_loss_percentage gain_loss_percentage
     *
     * @return $this
     */
    public function setGainLossPercentage($gain_loss_percentage)
    {
        $this->container['gain_loss_percentage'] = $gain_loss_percentage;

        return $this;
    }

    /**
     * Gets market_value
     *
     * @return string
     */
    public function getMarketValue()
    {
        return $this->container['market_value'];
    }

    /**
     * Sets market_value
     *
     * @param string $market_value market_value
     *
     * @return $this
     */
    public function setMarketValue($market_value)
    {
        $this->container['market_value'] = $market_value;

        return $this;
    }

    /**
     * Gets matched_state
     *
     * @return int
     */
    public function getMatchedState()
    {
        return $this->container['matched_state'];
    }

    /**
     * Sets matched_state
     *
     * @param int $matched_state matched_state
     *
     * @return $this
     */
    public function setMatchedState($matched_state)
    {
        $this->container['matched_state'] = $matched_state;

        return $this;
    }

    /**
     * Gets purchase_date
     *
     * @return string
     */
    public function getPurchaseDate()
    {
        return $this->container['purchase_date'];
    }

    /**
     * Sets purchase_date
     *
     * @param string $purchase_date purchase_date
     *
     * @return $this
     */
    public function setPurchaseDate($purchase_date)
    {
        $this->container['purchase_date'] = $purchase_date;

        return $this;
    }

    /**
     * Gets purchase_date_time
     *
     * @return int
     */
    public function getPurchaseDateTime()
    {
        return $this->container['purchase_date_time'];
    }

    /**
     * Sets purchase_date_time
     *
     * @param int $purchase_date_time purchase_date_time
     *
     * @return $this
     */
    public function setPurchaseDateTime($purchase_date_time)
    {
        $this->container['purchase_date_time'] = $purchase_date_time;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets created_at_time
     *
     * @return int
     */
    public function getCreatedAtTime()
    {
        return $this->container['created_at_time'];
    }

    /**
     * Sets created_at_time
     *
     * @param int $created_at_time created_at_time
     *
     * @return $this
     */
    public function setCreatedAtTime($created_at_time)
    {
        $this->container['created_at_time'] = $created_at_time;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool $can_edit can_edit
     *
     * @return $this
     */
    public function setCanEdit($can_edit)
    {
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return bool
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param bool $can_delete can_delete
     *
     * @return $this
     */
    public function setCanDelete($can_delete)
    {
        $this->container['can_delete'] = $can_delete;

        return $this;
    }

    /**
     * Gets tracking
     *
     * @return \StockX\Client\Model\PortfolioIdDelResponsePortfolioItemTracking
     */
    public function getTracking()
    {
        return $this->container['tracking'];
    }

    /**
     * Sets tracking
     *
     * @param \StockX\Client\Model\PortfolioIdDelResponsePortfolioItemTracking $tracking tracking
     *
     * @return $this
     */
    public function setTracking($tracking)
    {
        $this->container['tracking'] = $tracking;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return object
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param object $meta meta
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \StockX\Client\Model\PortfolioIdDelResponsePortfolioItemProduct
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \StockX\Client\Model\PortfolioIdDelResponsePortfolioItemProduct $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \StockX\Client\Model\PortfolioIdDelResponsePortfolioItemMerchant
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \StockX\Client\Model\PortfolioIdDelResponsePortfolioItemMerchant $merchant merchant
     *
     * @return $this
     */
    public function setMerchant($merchant)
    {
        $this->container['merchant'] = $merchant;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


