# coding: utf-8

"""
    StockX API

    PRERELEASE API - Subject to change before release. Provides access to StockX's public services, allowing end users to query for product and order information.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PortfolioResponsePortfolioItemProductMarket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'int',
        'sku_uuid': 'str',
        'product_uuid': 'str',
        'lowest_ask': 'int',
        'lowest_ask_size': 'str',
        'number_of_asks': 'int',
        'sales_this_period': 'int',
        'sales_last_period': 'int',
        'highest_bid': 'int',
        'highest_bid_size': 'str',
        'number_of_bids': 'int',
        'annual_high': 'int',
        'annual_low': 'int',
        'deadstock_range_low': 'int',
        'deadstock_range_high': 'int',
        'volatility': 'float',
        'deadstock_sold': 'int',
        'price_premium': 'float',
        'average_deadstock_price': 'int',
        'last_sale': 'int',
        'last_sale_size': 'str',
        'sales_last72_hours': 'int',
        'change_value': 'int',
        'change_percentage': 'float',
        'abs_change_percentage': 'float',
        'total_dollars': 'int',
        'updated_at': 'int',
        'last_lowest_ask_time': 'int',
        'last_highest_bid_time': 'int',
        'last_sale_date': 'str',
        'created_at': 'str',
        'deadstock_sold_rank': 'int',
        'price_premium_rank': 'int',
        'average_deadstock_price_rank': 'int'
    }

    attribute_map = {
        'product_id': 'productId',
        'sku_uuid': 'skuUuid',
        'product_uuid': 'productUuid',
        'lowest_ask': 'lowestAsk',
        'lowest_ask_size': 'lowestAskSize',
        'number_of_asks': 'numberOfAsks',
        'sales_this_period': 'salesThisPeriod',
        'sales_last_period': 'salesLastPeriod',
        'highest_bid': 'highestBid',
        'highest_bid_size': 'highestBidSize',
        'number_of_bids': 'numberOfBids',
        'annual_high': 'annualHigh',
        'annual_low': 'annualLow',
        'deadstock_range_low': 'deadstockRangeLow',
        'deadstock_range_high': 'deadstockRangeHigh',
        'volatility': 'volatility',
        'deadstock_sold': 'deadstockSold',
        'price_premium': 'pricePremium',
        'average_deadstock_price': 'averageDeadstockPrice',
        'last_sale': 'lastSale',
        'last_sale_size': 'lastSaleSize',
        'sales_last72_hours': 'salesLast72Hours',
        'change_value': 'changeValue',
        'change_percentage': 'changePercentage',
        'abs_change_percentage': 'absChangePercentage',
        'total_dollars': 'totalDollars',
        'updated_at': 'updatedAt',
        'last_lowest_ask_time': 'lastLowestAskTime',
        'last_highest_bid_time': 'lastHighestBidTime',
        'last_sale_date': 'lastSaleDate',
        'created_at': 'createdAt',
        'deadstock_sold_rank': 'deadstockSoldRank',
        'price_premium_rank': 'pricePremiumRank',
        'average_deadstock_price_rank': 'averageDeadstockPriceRank'
    }

    def __init__(self, product_id=None, sku_uuid=None, product_uuid=None, lowest_ask=None, lowest_ask_size=None, number_of_asks=None, sales_this_period=None, sales_last_period=None, highest_bid=None, highest_bid_size=None, number_of_bids=None, annual_high=None, annual_low=None, deadstock_range_low=None, deadstock_range_high=None, volatility=None, deadstock_sold=None, price_premium=None, average_deadstock_price=None, last_sale=None, last_sale_size=None, sales_last72_hours=None, change_value=None, change_percentage=None, abs_change_percentage=None, total_dollars=None, updated_at=None, last_lowest_ask_time=None, last_highest_bid_time=None, last_sale_date=None, created_at=None, deadstock_sold_rank=None, price_premium_rank=None, average_deadstock_price_rank=None):  # noqa: E501
        """PortfolioResponsePortfolioItemProductMarket - a model defined in Swagger"""  # noqa: E501

        self._product_id = None
        self._sku_uuid = None
        self._product_uuid = None
        self._lowest_ask = None
        self._lowest_ask_size = None
        self._number_of_asks = None
        self._sales_this_period = None
        self._sales_last_period = None
        self._highest_bid = None
        self._highest_bid_size = None
        self._number_of_bids = None
        self._annual_high = None
        self._annual_low = None
        self._deadstock_range_low = None
        self._deadstock_range_high = None
        self._volatility = None
        self._deadstock_sold = None
        self._price_premium = None
        self._average_deadstock_price = None
        self._last_sale = None
        self._last_sale_size = None
        self._sales_last72_hours = None
        self._change_value = None
        self._change_percentage = None
        self._abs_change_percentage = None
        self._total_dollars = None
        self._updated_at = None
        self._last_lowest_ask_time = None
        self._last_highest_bid_time = None
        self._last_sale_date = None
        self._created_at = None
        self._deadstock_sold_rank = None
        self._price_premium_rank = None
        self._average_deadstock_price_rank = None
        self.discriminator = None

        if product_id is not None:
            self.product_id = product_id
        if sku_uuid is not None:
            self.sku_uuid = sku_uuid
        if product_uuid is not None:
            self.product_uuid = product_uuid
        if lowest_ask is not None:
            self.lowest_ask = lowest_ask
        if lowest_ask_size is not None:
            self.lowest_ask_size = lowest_ask_size
        if number_of_asks is not None:
            self.number_of_asks = number_of_asks
        if sales_this_period is not None:
            self.sales_this_period = sales_this_period
        if sales_last_period is not None:
            self.sales_last_period = sales_last_period
        if highest_bid is not None:
            self.highest_bid = highest_bid
        if highest_bid_size is not None:
            self.highest_bid_size = highest_bid_size
        if number_of_bids is not None:
            self.number_of_bids = number_of_bids
        if annual_high is not None:
            self.annual_high = annual_high
        if annual_low is not None:
            self.annual_low = annual_low
        if deadstock_range_low is not None:
            self.deadstock_range_low = deadstock_range_low
        if deadstock_range_high is not None:
            self.deadstock_range_high = deadstock_range_high
        if volatility is not None:
            self.volatility = volatility
        if deadstock_sold is not None:
            self.deadstock_sold = deadstock_sold
        if price_premium is not None:
            self.price_premium = price_premium
        if average_deadstock_price is not None:
            self.average_deadstock_price = average_deadstock_price
        if last_sale is not None:
            self.last_sale = last_sale
        if last_sale_size is not None:
            self.last_sale_size = last_sale_size
        if sales_last72_hours is not None:
            self.sales_last72_hours = sales_last72_hours
        if change_value is not None:
            self.change_value = change_value
        if change_percentage is not None:
            self.change_percentage = change_percentage
        if abs_change_percentage is not None:
            self.abs_change_percentage = abs_change_percentage
        if total_dollars is not None:
            self.total_dollars = total_dollars
        if updated_at is not None:
            self.updated_at = updated_at
        if last_lowest_ask_time is not None:
            self.last_lowest_ask_time = last_lowest_ask_time
        if last_highest_bid_time is not None:
            self.last_highest_bid_time = last_highest_bid_time
        if last_sale_date is not None:
            self.last_sale_date = last_sale_date
        if created_at is not None:
            self.created_at = created_at
        if deadstock_sold_rank is not None:
            self.deadstock_sold_rank = deadstock_sold_rank
        if price_premium_rank is not None:
            self.price_premium_rank = price_premium_rank
        if average_deadstock_price_rank is not None:
            self.average_deadstock_price_rank = average_deadstock_price_rank

    @property
    def product_id(self):
        """Gets the product_id of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The product_id of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this PortfolioResponsePortfolioItemProductMarket.


        :param product_id: The product_id of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def sku_uuid(self):
        """Gets the sku_uuid of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The sku_uuid of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: str
        """
        return self._sku_uuid

    @sku_uuid.setter
    def sku_uuid(self, sku_uuid):
        """Sets the sku_uuid of this PortfolioResponsePortfolioItemProductMarket.


        :param sku_uuid: The sku_uuid of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: str
        """

        self._sku_uuid = sku_uuid

    @property
    def product_uuid(self):
        """Gets the product_uuid of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The product_uuid of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: str
        """
        return self._product_uuid

    @product_uuid.setter
    def product_uuid(self, product_uuid):
        """Sets the product_uuid of this PortfolioResponsePortfolioItemProductMarket.


        :param product_uuid: The product_uuid of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: str
        """

        self._product_uuid = product_uuid

    @property
    def lowest_ask(self):
        """Gets the lowest_ask of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The lowest_ask of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._lowest_ask

    @lowest_ask.setter
    def lowest_ask(self, lowest_ask):
        """Sets the lowest_ask of this PortfolioResponsePortfolioItemProductMarket.


        :param lowest_ask: The lowest_ask of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._lowest_ask = lowest_ask

    @property
    def lowest_ask_size(self):
        """Gets the lowest_ask_size of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The lowest_ask_size of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: str
        """
        return self._lowest_ask_size

    @lowest_ask_size.setter
    def lowest_ask_size(self, lowest_ask_size):
        """Sets the lowest_ask_size of this PortfolioResponsePortfolioItemProductMarket.


        :param lowest_ask_size: The lowest_ask_size of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: str
        """

        self._lowest_ask_size = lowest_ask_size

    @property
    def number_of_asks(self):
        """Gets the number_of_asks of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The number_of_asks of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._number_of_asks

    @number_of_asks.setter
    def number_of_asks(self, number_of_asks):
        """Sets the number_of_asks of this PortfolioResponsePortfolioItemProductMarket.


        :param number_of_asks: The number_of_asks of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._number_of_asks = number_of_asks

    @property
    def sales_this_period(self):
        """Gets the sales_this_period of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The sales_this_period of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._sales_this_period

    @sales_this_period.setter
    def sales_this_period(self, sales_this_period):
        """Sets the sales_this_period of this PortfolioResponsePortfolioItemProductMarket.


        :param sales_this_period: The sales_this_period of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._sales_this_period = sales_this_period

    @property
    def sales_last_period(self):
        """Gets the sales_last_period of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The sales_last_period of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._sales_last_period

    @sales_last_period.setter
    def sales_last_period(self, sales_last_period):
        """Sets the sales_last_period of this PortfolioResponsePortfolioItemProductMarket.


        :param sales_last_period: The sales_last_period of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._sales_last_period = sales_last_period

    @property
    def highest_bid(self):
        """Gets the highest_bid of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The highest_bid of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._highest_bid

    @highest_bid.setter
    def highest_bid(self, highest_bid):
        """Sets the highest_bid of this PortfolioResponsePortfolioItemProductMarket.


        :param highest_bid: The highest_bid of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._highest_bid = highest_bid

    @property
    def highest_bid_size(self):
        """Gets the highest_bid_size of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The highest_bid_size of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: str
        """
        return self._highest_bid_size

    @highest_bid_size.setter
    def highest_bid_size(self, highest_bid_size):
        """Sets the highest_bid_size of this PortfolioResponsePortfolioItemProductMarket.


        :param highest_bid_size: The highest_bid_size of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: str
        """

        self._highest_bid_size = highest_bid_size

    @property
    def number_of_bids(self):
        """Gets the number_of_bids of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The number_of_bids of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._number_of_bids

    @number_of_bids.setter
    def number_of_bids(self, number_of_bids):
        """Sets the number_of_bids of this PortfolioResponsePortfolioItemProductMarket.


        :param number_of_bids: The number_of_bids of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._number_of_bids = number_of_bids

    @property
    def annual_high(self):
        """Gets the annual_high of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The annual_high of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._annual_high

    @annual_high.setter
    def annual_high(self, annual_high):
        """Sets the annual_high of this PortfolioResponsePortfolioItemProductMarket.


        :param annual_high: The annual_high of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._annual_high = annual_high

    @property
    def annual_low(self):
        """Gets the annual_low of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The annual_low of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._annual_low

    @annual_low.setter
    def annual_low(self, annual_low):
        """Sets the annual_low of this PortfolioResponsePortfolioItemProductMarket.


        :param annual_low: The annual_low of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._annual_low = annual_low

    @property
    def deadstock_range_low(self):
        """Gets the deadstock_range_low of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The deadstock_range_low of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._deadstock_range_low

    @deadstock_range_low.setter
    def deadstock_range_low(self, deadstock_range_low):
        """Sets the deadstock_range_low of this PortfolioResponsePortfolioItemProductMarket.


        :param deadstock_range_low: The deadstock_range_low of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._deadstock_range_low = deadstock_range_low

    @property
    def deadstock_range_high(self):
        """Gets the deadstock_range_high of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The deadstock_range_high of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._deadstock_range_high

    @deadstock_range_high.setter
    def deadstock_range_high(self, deadstock_range_high):
        """Sets the deadstock_range_high of this PortfolioResponsePortfolioItemProductMarket.


        :param deadstock_range_high: The deadstock_range_high of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._deadstock_range_high = deadstock_range_high

    @property
    def volatility(self):
        """Gets the volatility of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The volatility of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: float
        """
        return self._volatility

    @volatility.setter
    def volatility(self, volatility):
        """Sets the volatility of this PortfolioResponsePortfolioItemProductMarket.


        :param volatility: The volatility of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: float
        """

        self._volatility = volatility

    @property
    def deadstock_sold(self):
        """Gets the deadstock_sold of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The deadstock_sold of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._deadstock_sold

    @deadstock_sold.setter
    def deadstock_sold(self, deadstock_sold):
        """Sets the deadstock_sold of this PortfolioResponsePortfolioItemProductMarket.


        :param deadstock_sold: The deadstock_sold of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._deadstock_sold = deadstock_sold

    @property
    def price_premium(self):
        """Gets the price_premium of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The price_premium of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: float
        """
        return self._price_premium

    @price_premium.setter
    def price_premium(self, price_premium):
        """Sets the price_premium of this PortfolioResponsePortfolioItemProductMarket.


        :param price_premium: The price_premium of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: float
        """

        self._price_premium = price_premium

    @property
    def average_deadstock_price(self):
        """Gets the average_deadstock_price of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The average_deadstock_price of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._average_deadstock_price

    @average_deadstock_price.setter
    def average_deadstock_price(self, average_deadstock_price):
        """Sets the average_deadstock_price of this PortfolioResponsePortfolioItemProductMarket.


        :param average_deadstock_price: The average_deadstock_price of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._average_deadstock_price = average_deadstock_price

    @property
    def last_sale(self):
        """Gets the last_sale of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The last_sale of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._last_sale

    @last_sale.setter
    def last_sale(self, last_sale):
        """Sets the last_sale of this PortfolioResponsePortfolioItemProductMarket.


        :param last_sale: The last_sale of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._last_sale = last_sale

    @property
    def last_sale_size(self):
        """Gets the last_sale_size of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The last_sale_size of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: str
        """
        return self._last_sale_size

    @last_sale_size.setter
    def last_sale_size(self, last_sale_size):
        """Sets the last_sale_size of this PortfolioResponsePortfolioItemProductMarket.


        :param last_sale_size: The last_sale_size of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: str
        """

        self._last_sale_size = last_sale_size

    @property
    def sales_last72_hours(self):
        """Gets the sales_last72_hours of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The sales_last72_hours of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._sales_last72_hours

    @sales_last72_hours.setter
    def sales_last72_hours(self, sales_last72_hours):
        """Sets the sales_last72_hours of this PortfolioResponsePortfolioItemProductMarket.


        :param sales_last72_hours: The sales_last72_hours of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._sales_last72_hours = sales_last72_hours

    @property
    def change_value(self):
        """Gets the change_value of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The change_value of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._change_value

    @change_value.setter
    def change_value(self, change_value):
        """Sets the change_value of this PortfolioResponsePortfolioItemProductMarket.


        :param change_value: The change_value of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._change_value = change_value

    @property
    def change_percentage(self):
        """Gets the change_percentage of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The change_percentage of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: float
        """
        return self._change_percentage

    @change_percentage.setter
    def change_percentage(self, change_percentage):
        """Sets the change_percentage of this PortfolioResponsePortfolioItemProductMarket.


        :param change_percentage: The change_percentage of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: float
        """

        self._change_percentage = change_percentage

    @property
    def abs_change_percentage(self):
        """Gets the abs_change_percentage of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The abs_change_percentage of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: float
        """
        return self._abs_change_percentage

    @abs_change_percentage.setter
    def abs_change_percentage(self, abs_change_percentage):
        """Sets the abs_change_percentage of this PortfolioResponsePortfolioItemProductMarket.


        :param abs_change_percentage: The abs_change_percentage of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: float
        """

        self._abs_change_percentage = abs_change_percentage

    @property
    def total_dollars(self):
        """Gets the total_dollars of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The total_dollars of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._total_dollars

    @total_dollars.setter
    def total_dollars(self, total_dollars):
        """Sets the total_dollars of this PortfolioResponsePortfolioItemProductMarket.


        :param total_dollars: The total_dollars of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._total_dollars = total_dollars

    @property
    def updated_at(self):
        """Gets the updated_at of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The updated_at of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PortfolioResponsePortfolioItemProductMarket.


        :param updated_at: The updated_at of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def last_lowest_ask_time(self):
        """Gets the last_lowest_ask_time of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The last_lowest_ask_time of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._last_lowest_ask_time

    @last_lowest_ask_time.setter
    def last_lowest_ask_time(self, last_lowest_ask_time):
        """Sets the last_lowest_ask_time of this PortfolioResponsePortfolioItemProductMarket.


        :param last_lowest_ask_time: The last_lowest_ask_time of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._last_lowest_ask_time = last_lowest_ask_time

    @property
    def last_highest_bid_time(self):
        """Gets the last_highest_bid_time of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The last_highest_bid_time of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._last_highest_bid_time

    @last_highest_bid_time.setter
    def last_highest_bid_time(self, last_highest_bid_time):
        """Sets the last_highest_bid_time of this PortfolioResponsePortfolioItemProductMarket.


        :param last_highest_bid_time: The last_highest_bid_time of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._last_highest_bid_time = last_highest_bid_time

    @property
    def last_sale_date(self):
        """Gets the last_sale_date of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The last_sale_date of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: str
        """
        return self._last_sale_date

    @last_sale_date.setter
    def last_sale_date(self, last_sale_date):
        """Sets the last_sale_date of this PortfolioResponsePortfolioItemProductMarket.


        :param last_sale_date: The last_sale_date of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: str
        """

        self._last_sale_date = last_sale_date

    @property
    def created_at(self):
        """Gets the created_at of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The created_at of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PortfolioResponsePortfolioItemProductMarket.


        :param created_at: The created_at of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def deadstock_sold_rank(self):
        """Gets the deadstock_sold_rank of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The deadstock_sold_rank of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._deadstock_sold_rank

    @deadstock_sold_rank.setter
    def deadstock_sold_rank(self, deadstock_sold_rank):
        """Sets the deadstock_sold_rank of this PortfolioResponsePortfolioItemProductMarket.


        :param deadstock_sold_rank: The deadstock_sold_rank of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._deadstock_sold_rank = deadstock_sold_rank

    @property
    def price_premium_rank(self):
        """Gets the price_premium_rank of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The price_premium_rank of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._price_premium_rank

    @price_premium_rank.setter
    def price_premium_rank(self, price_premium_rank):
        """Sets the price_premium_rank of this PortfolioResponsePortfolioItemProductMarket.


        :param price_premium_rank: The price_premium_rank of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._price_premium_rank = price_premium_rank

    @property
    def average_deadstock_price_rank(self):
        """Gets the average_deadstock_price_rank of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501


        :return: The average_deadstock_price_rank of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :rtype: int
        """
        return self._average_deadstock_price_rank

    @average_deadstock_price_rank.setter
    def average_deadstock_price_rank(self, average_deadstock_price_rank):
        """Sets the average_deadstock_price_rank of this PortfolioResponsePortfolioItemProductMarket.


        :param average_deadstock_price_rank: The average_deadstock_price_rank of this PortfolioResponsePortfolioItemProductMarket.  # noqa: E501
        :type: int
        """

        self._average_deadstock_price_rank = average_deadstock_price_rank

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioResponsePortfolioItemProductMarket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
