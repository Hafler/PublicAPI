# coding: utf-8

"""
    StockX API

    PRERELEASE API - Subject to change before release. Provides access to StockX's public services, allowing end users to query for product and order information.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProductInfoProductAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_category': 'str',
        'url_key': 'str',
        'slug': 'str',
        'brand': 'str',
        'ticker': 'str',
        'style_id': 'str',
        'model': 'str',
        'name': 'str',
        'title': 'str',
        'size_locale': 'str',
        'size_title': 'str',
        'size_descriptor': 'str',
        'size_all_descriptor': 'str',
        'gender': 'str',
        'condition': 'str',
        'minimum_bid': 'int',
        'uniq_bids': 'bool',
        'primary_category': 'str',
        'secondary_category': 'str'
    }

    attribute_map = {
        'product_category': 'product_category',
        'url_key': 'url_key',
        'slug': 'slug',
        'brand': 'brand',
        'ticker': 'ticker',
        'style_id': 'style_id',
        'model': 'model',
        'name': 'name',
        'title': 'title',
        'size_locale': 'size_locale',
        'size_title': 'size_title',
        'size_descriptor': 'size_descriptor',
        'size_all_descriptor': 'size_all_descriptor',
        'gender': 'gender',
        'condition': 'condition',
        'minimum_bid': 'minimum_bid',
        'uniq_bids': 'uniq_bids',
        'primary_category': 'primary_category',
        'secondary_category': 'secondary_category'
    }

    def __init__(self, product_category=None, url_key=None, slug=None, brand=None, ticker=None, style_id=None, model=None, name=None, title=None, size_locale=None, size_title=None, size_descriptor=None, size_all_descriptor=None, gender=None, condition=None, minimum_bid=None, uniq_bids=None, primary_category=None, secondary_category=None):  # noqa: E501
        """ProductInfoProductAttributes - a model defined in Swagger"""  # noqa: E501

        self._product_category = None
        self._url_key = None
        self._slug = None
        self._brand = None
        self._ticker = None
        self._style_id = None
        self._model = None
        self._name = None
        self._title = None
        self._size_locale = None
        self._size_title = None
        self._size_descriptor = None
        self._size_all_descriptor = None
        self._gender = None
        self._condition = None
        self._minimum_bid = None
        self._uniq_bids = None
        self._primary_category = None
        self._secondary_category = None
        self.discriminator = None

        if product_category is not None:
            self.product_category = product_category
        if url_key is not None:
            self.url_key = url_key
        if slug is not None:
            self.slug = slug
        if brand is not None:
            self.brand = brand
        if ticker is not None:
            self.ticker = ticker
        if style_id is not None:
            self.style_id = style_id
        if model is not None:
            self.model = model
        if name is not None:
            self.name = name
        if title is not None:
            self.title = title
        if size_locale is not None:
            self.size_locale = size_locale
        if size_title is not None:
            self.size_title = size_title
        if size_descriptor is not None:
            self.size_descriptor = size_descriptor
        if size_all_descriptor is not None:
            self.size_all_descriptor = size_all_descriptor
        if gender is not None:
            self.gender = gender
        if condition is not None:
            self.condition = condition
        if minimum_bid is not None:
            self.minimum_bid = minimum_bid
        if uniq_bids is not None:
            self.uniq_bids = uniq_bids
        if primary_category is not None:
            self.primary_category = primary_category
        if secondary_category is not None:
            self.secondary_category = secondary_category

    @property
    def product_category(self):
        """Gets the product_category of this ProductInfoProductAttributes.  # noqa: E501


        :return: The product_category of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._product_category

    @product_category.setter
    def product_category(self, product_category):
        """Sets the product_category of this ProductInfoProductAttributes.


        :param product_category: The product_category of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._product_category = product_category

    @property
    def url_key(self):
        """Gets the url_key of this ProductInfoProductAttributes.  # noqa: E501


        :return: The url_key of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._url_key

    @url_key.setter
    def url_key(self, url_key):
        """Sets the url_key of this ProductInfoProductAttributes.


        :param url_key: The url_key of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._url_key = url_key

    @property
    def slug(self):
        """Gets the slug of this ProductInfoProductAttributes.  # noqa: E501


        :return: The slug of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this ProductInfoProductAttributes.


        :param slug: The slug of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def brand(self):
        """Gets the brand of this ProductInfoProductAttributes.  # noqa: E501


        :return: The brand of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this ProductInfoProductAttributes.


        :param brand: The brand of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def ticker(self):
        """Gets the ticker of this ProductInfoProductAttributes.  # noqa: E501


        :return: The ticker of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this ProductInfoProductAttributes.


        :param ticker: The ticker of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def style_id(self):
        """Gets the style_id of this ProductInfoProductAttributes.  # noqa: E501


        :return: The style_id of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._style_id

    @style_id.setter
    def style_id(self, style_id):
        """Sets the style_id of this ProductInfoProductAttributes.


        :param style_id: The style_id of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._style_id = style_id

    @property
    def model(self):
        """Gets the model of this ProductInfoProductAttributes.  # noqa: E501


        :return: The model of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ProductInfoProductAttributes.


        :param model: The model of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this ProductInfoProductAttributes.  # noqa: E501


        :return: The name of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductInfoProductAttributes.


        :param name: The name of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title(self):
        """Gets the title of this ProductInfoProductAttributes.  # noqa: E501


        :return: The title of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProductInfoProductAttributes.


        :param title: The title of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def size_locale(self):
        """Gets the size_locale of this ProductInfoProductAttributes.  # noqa: E501


        :return: The size_locale of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._size_locale

    @size_locale.setter
    def size_locale(self, size_locale):
        """Sets the size_locale of this ProductInfoProductAttributes.


        :param size_locale: The size_locale of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._size_locale = size_locale

    @property
    def size_title(self):
        """Gets the size_title of this ProductInfoProductAttributes.  # noqa: E501


        :return: The size_title of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._size_title

    @size_title.setter
    def size_title(self, size_title):
        """Sets the size_title of this ProductInfoProductAttributes.


        :param size_title: The size_title of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._size_title = size_title

    @property
    def size_descriptor(self):
        """Gets the size_descriptor of this ProductInfoProductAttributes.  # noqa: E501


        :return: The size_descriptor of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._size_descriptor

    @size_descriptor.setter
    def size_descriptor(self, size_descriptor):
        """Sets the size_descriptor of this ProductInfoProductAttributes.


        :param size_descriptor: The size_descriptor of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._size_descriptor = size_descriptor

    @property
    def size_all_descriptor(self):
        """Gets the size_all_descriptor of this ProductInfoProductAttributes.  # noqa: E501


        :return: The size_all_descriptor of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._size_all_descriptor

    @size_all_descriptor.setter
    def size_all_descriptor(self, size_all_descriptor):
        """Sets the size_all_descriptor of this ProductInfoProductAttributes.


        :param size_all_descriptor: The size_all_descriptor of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._size_all_descriptor = size_all_descriptor

    @property
    def gender(self):
        """Gets the gender of this ProductInfoProductAttributes.  # noqa: E501


        :return: The gender of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this ProductInfoProductAttributes.


        :param gender: The gender of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def condition(self):
        """Gets the condition of this ProductInfoProductAttributes.  # noqa: E501


        :return: The condition of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ProductInfoProductAttributes.


        :param condition: The condition of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def minimum_bid(self):
        """Gets the minimum_bid of this ProductInfoProductAttributes.  # noqa: E501


        :return: The minimum_bid of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: int
        """
        return self._minimum_bid

    @minimum_bid.setter
    def minimum_bid(self, minimum_bid):
        """Sets the minimum_bid of this ProductInfoProductAttributes.


        :param minimum_bid: The minimum_bid of this ProductInfoProductAttributes.  # noqa: E501
        :type: int
        """

        self._minimum_bid = minimum_bid

    @property
    def uniq_bids(self):
        """Gets the uniq_bids of this ProductInfoProductAttributes.  # noqa: E501


        :return: The uniq_bids of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._uniq_bids

    @uniq_bids.setter
    def uniq_bids(self, uniq_bids):
        """Sets the uniq_bids of this ProductInfoProductAttributes.


        :param uniq_bids: The uniq_bids of this ProductInfoProductAttributes.  # noqa: E501
        :type: bool
        """

        self._uniq_bids = uniq_bids

    @property
    def primary_category(self):
        """Gets the primary_category of this ProductInfoProductAttributes.  # noqa: E501


        :return: The primary_category of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._primary_category

    @primary_category.setter
    def primary_category(self, primary_category):
        """Sets the primary_category of this ProductInfoProductAttributes.


        :param primary_category: The primary_category of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._primary_category = primary_category

    @property
    def secondary_category(self):
        """Gets the secondary_category of this ProductInfoProductAttributes.  # noqa: E501


        :return: The secondary_category of this ProductInfoProductAttributes.  # noqa: E501
        :rtype: str
        """
        return self._secondary_category

    @secondary_category.setter
    def secondary_category(self, secondary_category):
        """Sets the secondary_category of this ProductInfoProductAttributes.


        :param secondary_category: The secondary_category of this ProductInfoProductAttributes.  # noqa: E501
        :type: str
        """

        self._secondary_category = secondary_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductInfoProductAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
