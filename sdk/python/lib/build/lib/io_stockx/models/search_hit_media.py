# coding: utf-8

"""
    StockX API

    PRERELEASE API - Subject to change before release. Provides access to StockX's public services, allowing end users to query for product and order information.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SearchHitMedia(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image_url': 'str',
        'small_image_url': 'str',
        'thumb_url': 'str',
        'gallery': 'list[str]',
        'hidden': 'bool'
    }

    attribute_map = {
        'image_url': 'imageUrl',
        'small_image_url': 'smallImageUrl',
        'thumb_url': 'thumbUrl',
        'gallery': 'gallery',
        'hidden': 'hidden'
    }

    def __init__(self, image_url=None, small_image_url=None, thumb_url=None, gallery=None, hidden=None):  # noqa: E501
        """SearchHitMedia - a model defined in Swagger"""  # noqa: E501

        self._image_url = None
        self._small_image_url = None
        self._thumb_url = None
        self._gallery = None
        self._hidden = None
        self.discriminator = None

        if image_url is not None:
            self.image_url = image_url
        if small_image_url is not None:
            self.small_image_url = small_image_url
        if thumb_url is not None:
            self.thumb_url = thumb_url
        if gallery is not None:
            self.gallery = gallery
        if hidden is not None:
            self.hidden = hidden

    @property
    def image_url(self):
        """Gets the image_url of this SearchHitMedia.  # noqa: E501


        :return: The image_url of this SearchHitMedia.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this SearchHitMedia.


        :param image_url: The image_url of this SearchHitMedia.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def small_image_url(self):
        """Gets the small_image_url of this SearchHitMedia.  # noqa: E501


        :return: The small_image_url of this SearchHitMedia.  # noqa: E501
        :rtype: str
        """
        return self._small_image_url

    @small_image_url.setter
    def small_image_url(self, small_image_url):
        """Sets the small_image_url of this SearchHitMedia.


        :param small_image_url: The small_image_url of this SearchHitMedia.  # noqa: E501
        :type: str
        """

        self._small_image_url = small_image_url

    @property
    def thumb_url(self):
        """Gets the thumb_url of this SearchHitMedia.  # noqa: E501


        :return: The thumb_url of this SearchHitMedia.  # noqa: E501
        :rtype: str
        """
        return self._thumb_url

    @thumb_url.setter
    def thumb_url(self, thumb_url):
        """Sets the thumb_url of this SearchHitMedia.


        :param thumb_url: The thumb_url of this SearchHitMedia.  # noqa: E501
        :type: str
        """

        self._thumb_url = thumb_url

    @property
    def gallery(self):
        """Gets the gallery of this SearchHitMedia.  # noqa: E501


        :return: The gallery of this SearchHitMedia.  # noqa: E501
        :rtype: list[str]
        """
        return self._gallery

    @gallery.setter
    def gallery(self, gallery):
        """Sets the gallery of this SearchHitMedia.


        :param gallery: The gallery of this SearchHitMedia.  # noqa: E501
        :type: list[str]
        """

        self._gallery = gallery

    @property
    def hidden(self):
        """Gets the hidden of this SearchHitMedia.  # noqa: E501


        :return: The hidden of this SearchHitMedia.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this SearchHitMedia.


        :param hidden: The hidden of this SearchHitMedia.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchHitMedia):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
