# coding: utf-8

"""
    StockX API

    PRERELEASE API - Subject to change before release. Provides access to StockX's public services, allowing end users to query for product and order information.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SearchHitSearchableTraits(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'style': 'str',
        'colorway': 'str',
        'retail_price': 'int',
        'release_date': 'str'
    }

    attribute_map = {
        'style': 'Style',
        'colorway': 'Colorway',
        'retail_price': 'Retail Price',
        'release_date': 'Release Date'
    }

    def __init__(self, style=None, colorway=None, retail_price=None, release_date=None):  # noqa: E501
        """SearchHitSearchableTraits - a model defined in Swagger"""  # noqa: E501

        self._style = None
        self._colorway = None
        self._retail_price = None
        self._release_date = None
        self.discriminator = None

        if style is not None:
            self.style = style
        if colorway is not None:
            self.colorway = colorway
        if retail_price is not None:
            self.retail_price = retail_price
        if release_date is not None:
            self.release_date = release_date

    @property
    def style(self):
        """Gets the style of this SearchHitSearchableTraits.  # noqa: E501


        :return: The style of this SearchHitSearchableTraits.  # noqa: E501
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this SearchHitSearchableTraits.


        :param style: The style of this SearchHitSearchableTraits.  # noqa: E501
        :type: str
        """

        self._style = style

    @property
    def colorway(self):
        """Gets the colorway of this SearchHitSearchableTraits.  # noqa: E501


        :return: The colorway of this SearchHitSearchableTraits.  # noqa: E501
        :rtype: str
        """
        return self._colorway

    @colorway.setter
    def colorway(self, colorway):
        """Sets the colorway of this SearchHitSearchableTraits.


        :param colorway: The colorway of this SearchHitSearchableTraits.  # noqa: E501
        :type: str
        """

        self._colorway = colorway

    @property
    def retail_price(self):
        """Gets the retail_price of this SearchHitSearchableTraits.  # noqa: E501


        :return: The retail_price of this SearchHitSearchableTraits.  # noqa: E501
        :rtype: int
        """
        return self._retail_price

    @retail_price.setter
    def retail_price(self, retail_price):
        """Sets the retail_price of this SearchHitSearchableTraits.


        :param retail_price: The retail_price of this SearchHitSearchableTraits.  # noqa: E501
        :type: int
        """

        self._retail_price = retail_price

    @property
    def release_date(self):
        """Gets the release_date of this SearchHitSearchableTraits.  # noqa: E501


        :return: The release_date of this SearchHitSearchableTraits.  # noqa: E501
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this SearchHitSearchableTraits.


        :param release_date: The release_date of this SearchHitSearchableTraits.  # noqa: E501
        :type: str
        """

        self._release_date = release_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchHitSearchableTraits):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
