# coding: utf-8

"""
    StockX API

    PRERELEASE API - Subject to change before release. Provides access to StockX's public services, allowing end users to query for product and order information.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PortfolioIdDelResponsePortfolioItemProductShipping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_days_to_ship': 'int',
        'has_additional_days_to_ship': 'bool',
        'delivery_days_lower_bound': 'int',
        'delivery_days_upper_bound': 'int'
    }

    attribute_map = {
        'total_days_to_ship': 'totalDaysToShip',
        'has_additional_days_to_ship': 'hasAdditionalDaysToShip',
        'delivery_days_lower_bound': 'deliveryDaysLowerBound',
        'delivery_days_upper_bound': 'deliveryDaysUpperBound'
    }

    def __init__(self, total_days_to_ship=None, has_additional_days_to_ship=None, delivery_days_lower_bound=None, delivery_days_upper_bound=None):  # noqa: E501
        """PortfolioIdDelResponsePortfolioItemProductShipping - a model defined in Swagger"""  # noqa: E501

        self._total_days_to_ship = None
        self._has_additional_days_to_ship = None
        self._delivery_days_lower_bound = None
        self._delivery_days_upper_bound = None
        self.discriminator = None

        self.total_days_to_ship = total_days_to_ship
        self.has_additional_days_to_ship = has_additional_days_to_ship
        self.delivery_days_lower_bound = delivery_days_lower_bound
        self.delivery_days_upper_bound = delivery_days_upper_bound

    @property
    def total_days_to_ship(self):
        """Gets the total_days_to_ship of this PortfolioIdDelResponsePortfolioItemProductShipping.  # noqa: E501


        :return: The total_days_to_ship of this PortfolioIdDelResponsePortfolioItemProductShipping.  # noqa: E501
        :rtype: int
        """
        return self._total_days_to_ship

    @total_days_to_ship.setter
    def total_days_to_ship(self, total_days_to_ship):
        """Sets the total_days_to_ship of this PortfolioIdDelResponsePortfolioItemProductShipping.


        :param total_days_to_ship: The total_days_to_ship of this PortfolioIdDelResponsePortfolioItemProductShipping.  # noqa: E501
        :type: int
        """
        if total_days_to_ship is None:
            raise ValueError("Invalid value for `total_days_to_ship`, must not be `None`")  # noqa: E501

        self._total_days_to_ship = total_days_to_ship

    @property
    def has_additional_days_to_ship(self):
        """Gets the has_additional_days_to_ship of this PortfolioIdDelResponsePortfolioItemProductShipping.  # noqa: E501


        :return: The has_additional_days_to_ship of this PortfolioIdDelResponsePortfolioItemProductShipping.  # noqa: E501
        :rtype: bool
        """
        return self._has_additional_days_to_ship

    @has_additional_days_to_ship.setter
    def has_additional_days_to_ship(self, has_additional_days_to_ship):
        """Sets the has_additional_days_to_ship of this PortfolioIdDelResponsePortfolioItemProductShipping.


        :param has_additional_days_to_ship: The has_additional_days_to_ship of this PortfolioIdDelResponsePortfolioItemProductShipping.  # noqa: E501
        :type: bool
        """
        if has_additional_days_to_ship is None:
            raise ValueError("Invalid value for `has_additional_days_to_ship`, must not be `None`")  # noqa: E501

        self._has_additional_days_to_ship = has_additional_days_to_ship

    @property
    def delivery_days_lower_bound(self):
        """Gets the delivery_days_lower_bound of this PortfolioIdDelResponsePortfolioItemProductShipping.  # noqa: E501


        :return: The delivery_days_lower_bound of this PortfolioIdDelResponsePortfolioItemProductShipping.  # noqa: E501
        :rtype: int
        """
        return self._delivery_days_lower_bound

    @delivery_days_lower_bound.setter
    def delivery_days_lower_bound(self, delivery_days_lower_bound):
        """Sets the delivery_days_lower_bound of this PortfolioIdDelResponsePortfolioItemProductShipping.


        :param delivery_days_lower_bound: The delivery_days_lower_bound of this PortfolioIdDelResponsePortfolioItemProductShipping.  # noqa: E501
        :type: int
        """
        if delivery_days_lower_bound is None:
            raise ValueError("Invalid value for `delivery_days_lower_bound`, must not be `None`")  # noqa: E501

        self._delivery_days_lower_bound = delivery_days_lower_bound

    @property
    def delivery_days_upper_bound(self):
        """Gets the delivery_days_upper_bound of this PortfolioIdDelResponsePortfolioItemProductShipping.  # noqa: E501


        :return: The delivery_days_upper_bound of this PortfolioIdDelResponsePortfolioItemProductShipping.  # noqa: E501
        :rtype: int
        """
        return self._delivery_days_upper_bound

    @delivery_days_upper_bound.setter
    def delivery_days_upper_bound(self, delivery_days_upper_bound):
        """Sets the delivery_days_upper_bound of this PortfolioIdDelResponsePortfolioItemProductShipping.


        :param delivery_days_upper_bound: The delivery_days_upper_bound of this PortfolioIdDelResponsePortfolioItemProductShipping.  # noqa: E501
        :type: int
        """
        if delivery_days_upper_bound is None:
            raise ValueError("Invalid value for `delivery_days_upper_bound`, must not be `None`")  # noqa: E501

        self._delivery_days_upper_bound = delivery_days_upper_bound

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioIdDelResponsePortfolioItemProductShipping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
