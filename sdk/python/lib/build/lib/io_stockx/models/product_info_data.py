# coding: utf-8

"""
    StockX API

    PRERELEASE API - Subject to change before release. Provides access to StockX's public services, allowing end users to query for product and order information.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from io_stockx.models.product_info_attributes import ProductInfoAttributes  # noqa: F401,E501
from io_stockx.models.product_info_product import ProductInfoProduct  # noqa: F401,E501


class ProductInfoData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'id': 'str',
        'attributes': 'ProductInfoAttributes',
        'product': 'ProductInfoProduct',
        'hidden': 'bool',
        'size_sort_order': 'int'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'attributes': 'attributes',
        'product': 'product',
        'hidden': 'hidden',
        'size_sort_order': 'size_sort_order'
    }

    def __init__(self, type=None, id=None, attributes=None, product=None, hidden=None, size_sort_order=None):  # noqa: E501
        """ProductInfoData - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._id = None
        self._attributes = None
        self._product = None
        self._hidden = None
        self._size_sort_order = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if attributes is not None:
            self.attributes = attributes
        if product is not None:
            self.product = product
        if hidden is not None:
            self.hidden = hidden
        if size_sort_order is not None:
            self.size_sort_order = size_sort_order

    @property
    def type(self):
        """Gets the type of this ProductInfoData.  # noqa: E501


        :return: The type of this ProductInfoData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductInfoData.


        :param type: The type of this ProductInfoData.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this ProductInfoData.  # noqa: E501


        :return: The id of this ProductInfoData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductInfoData.


        :param id: The id of this ProductInfoData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def attributes(self):
        """Gets the attributes of this ProductInfoData.  # noqa: E501


        :return: The attributes of this ProductInfoData.  # noqa: E501
        :rtype: ProductInfoAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ProductInfoData.


        :param attributes: The attributes of this ProductInfoData.  # noqa: E501
        :type: ProductInfoAttributes
        """

        self._attributes = attributes

    @property
    def product(self):
        """Gets the product of this ProductInfoData.  # noqa: E501


        :return: The product of this ProductInfoData.  # noqa: E501
        :rtype: ProductInfoProduct
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ProductInfoData.


        :param product: The product of this ProductInfoData.  # noqa: E501
        :type: ProductInfoProduct
        """

        self._product = product

    @property
    def hidden(self):
        """Gets the hidden of this ProductInfoData.  # noqa: E501


        :return: The hidden of this ProductInfoData.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this ProductInfoData.


        :param hidden: The hidden of this ProductInfoData.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def size_sort_order(self):
        """Gets the size_sort_order of this ProductInfoData.  # noqa: E501


        :return: The size_sort_order of this ProductInfoData.  # noqa: E501
        :rtype: int
        """
        return self._size_sort_order

    @size_sort_order.setter
    def size_sort_order(self, size_sort_order):
        """Sets the size_sort_order of this ProductInfoData.


        :param size_sort_order: The size_sort_order of this ProductInfoData.  # noqa: E501
        :type: int
        """

        self._size_sort_order = size_sort_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductInfoData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
