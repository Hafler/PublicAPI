# coding: utf-8

"""
    StockX API

    PRERELEASE API - Subject to change before release. Provides access to StockX's public services, allowing end users to query for product and order information.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from io_stockx.models.product_info_attributes_traits import ProductInfoAttributesTraits  # noqa: F401,E501


class ProductInfoAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_uuid': 'str',
        'sku': 'str',
        'traits': 'ProductInfoAttributesTraits'
    }

    attribute_map = {
        'product_uuid': 'product_uuid',
        'sku': 'sku',
        'traits': 'traits'
    }

    def __init__(self, product_uuid=None, sku=None, traits=None):  # noqa: E501
        """ProductInfoAttributes - a model defined in Swagger"""  # noqa: E501

        self._product_uuid = None
        self._sku = None
        self._traits = None
        self.discriminator = None

        if product_uuid is not None:
            self.product_uuid = product_uuid
        if sku is not None:
            self.sku = sku
        if traits is not None:
            self.traits = traits

    @property
    def product_uuid(self):
        """Gets the product_uuid of this ProductInfoAttributes.  # noqa: E501


        :return: The product_uuid of this ProductInfoAttributes.  # noqa: E501
        :rtype: str
        """
        return self._product_uuid

    @product_uuid.setter
    def product_uuid(self, product_uuid):
        """Sets the product_uuid of this ProductInfoAttributes.


        :param product_uuid: The product_uuid of this ProductInfoAttributes.  # noqa: E501
        :type: str
        """

        self._product_uuid = product_uuid

    @property
    def sku(self):
        """Gets the sku of this ProductInfoAttributes.  # noqa: E501


        :return: The sku of this ProductInfoAttributes.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductInfoAttributes.


        :param sku: The sku of this ProductInfoAttributes.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def traits(self):
        """Gets the traits of this ProductInfoAttributes.  # noqa: E501


        :return: The traits of this ProductInfoAttributes.  # noqa: E501
        :rtype: ProductInfoAttributesTraits
        """
        return self._traits

    @traits.setter
    def traits(self, traits):
        """Sets the traits of this ProductInfoAttributes.


        :param traits: The traits of this ProductInfoAttributes.  # noqa: E501
        :type: ProductInfoAttributesTraits
        """

        self._traits = traits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductInfoAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
