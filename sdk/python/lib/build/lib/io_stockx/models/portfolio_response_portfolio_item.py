# coding: utf-8

"""
    StockX API

    PRERELEASE API - Subject to change before release. Provides access to StockX's public services, allowing end users to query for product and order information.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from io_stockx.models.portfolio_response_portfolio_item_product import PortfolioResponsePortfolioItemProduct  # noqa: F401,E501
from io_stockx.models.portfolio_response_portfolio_item_tracking import PortfolioResponsePortfolioItemTracking  # noqa: F401,E501


class PortfolioResponsePortfolioItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chain_id': 'str',
        'customer_id': 'int',
        'product_id': 'str',
        'sku_uuid': 'str',
        'merchant_id': 'int',
        'condition': 'int',
        'action': 'int',
        'action_by': 'int',
        'amount': 'int',
        'expires_at': 'str',
        'expires_at_time': 'int',
        'gain_loss_dollars': 'int',
        'gain_loss_percentage': 'int',
        'market_value': 'str',
        'matched_state': 'int',
        'purchase_date': 'str',
        'purchase_date_time': 'int',
        'state': 'int',
        'status_message': 'str',
        'text': 'str',
        'created_at': 'str',
        'created_at_time': 'int',
        'refer_url': 'str',
        'can_edit': 'bool',
        'can_delete': 'bool',
        'tracking': 'PortfolioResponsePortfolioItemTracking',
        'meta': 'object',
        'product': 'PortfolioResponsePortfolioItemProduct'
    }

    attribute_map = {
        'chain_id': 'chainId',
        'customer_id': 'customerId',
        'product_id': 'productId',
        'sku_uuid': 'skuUuid',
        'merchant_id': 'merchantId',
        'condition': 'condition',
        'action': 'action',
        'action_by': 'actionBy',
        'amount': 'amount',
        'expires_at': 'expiresAt',
        'expires_at_time': 'expiresAtTime',
        'gain_loss_dollars': 'gainLossDollars',
        'gain_loss_percentage': 'gainLossPercentage',
        'market_value': 'marketValue',
        'matched_state': 'matchedState',
        'purchase_date': 'purchaseDate',
        'purchase_date_time': 'purchaseDateTime',
        'state': 'state',
        'status_message': 'statusMessage',
        'text': 'text',
        'created_at': 'createdAt',
        'created_at_time': 'createdAtTime',
        'refer_url': 'referUrl',
        'can_edit': 'canEdit',
        'can_delete': 'canDelete',
        'tracking': 'Tracking',
        'meta': 'meta',
        'product': 'product'
    }

    def __init__(self, chain_id=None, customer_id=None, product_id=None, sku_uuid=None, merchant_id=None, condition=None, action=None, action_by=None, amount=None, expires_at=None, expires_at_time=None, gain_loss_dollars=None, gain_loss_percentage=None, market_value=None, matched_state=None, purchase_date=None, purchase_date_time=None, state=None, status_message=None, text=None, created_at=None, created_at_time=None, refer_url=None, can_edit=None, can_delete=None, tracking=None, meta=None, product=None):  # noqa: E501
        """PortfolioResponsePortfolioItem - a model defined in Swagger"""  # noqa: E501

        self._chain_id = None
        self._customer_id = None
        self._product_id = None
        self._sku_uuid = None
        self._merchant_id = None
        self._condition = None
        self._action = None
        self._action_by = None
        self._amount = None
        self._expires_at = None
        self._expires_at_time = None
        self._gain_loss_dollars = None
        self._gain_loss_percentage = None
        self._market_value = None
        self._matched_state = None
        self._purchase_date = None
        self._purchase_date_time = None
        self._state = None
        self._status_message = None
        self._text = None
        self._created_at = None
        self._created_at_time = None
        self._refer_url = None
        self._can_edit = None
        self._can_delete = None
        self._tracking = None
        self._meta = None
        self._product = None
        self.discriminator = None

        if chain_id is not None:
            self.chain_id = chain_id
        if customer_id is not None:
            self.customer_id = customer_id
        if product_id is not None:
            self.product_id = product_id
        if sku_uuid is not None:
            self.sku_uuid = sku_uuid
        if merchant_id is not None:
            self.merchant_id = merchant_id
        if condition is not None:
            self.condition = condition
        if action is not None:
            self.action = action
        if action_by is not None:
            self.action_by = action_by
        if amount is not None:
            self.amount = amount
        if expires_at is not None:
            self.expires_at = expires_at
        if expires_at_time is not None:
            self.expires_at_time = expires_at_time
        if gain_loss_dollars is not None:
            self.gain_loss_dollars = gain_loss_dollars
        if gain_loss_percentage is not None:
            self.gain_loss_percentage = gain_loss_percentage
        if market_value is not None:
            self.market_value = market_value
        if matched_state is not None:
            self.matched_state = matched_state
        if purchase_date is not None:
            self.purchase_date = purchase_date
        if purchase_date_time is not None:
            self.purchase_date_time = purchase_date_time
        if state is not None:
            self.state = state
        if status_message is not None:
            self.status_message = status_message
        if text is not None:
            self.text = text
        if created_at is not None:
            self.created_at = created_at
        if created_at_time is not None:
            self.created_at_time = created_at_time
        if refer_url is not None:
            self.refer_url = refer_url
        if can_edit is not None:
            self.can_edit = can_edit
        if can_delete is not None:
            self.can_delete = can_delete
        if tracking is not None:
            self.tracking = tracking
        if meta is not None:
            self.meta = meta
        if product is not None:
            self.product = product

    @property
    def chain_id(self):
        """Gets the chain_id of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The chain_id of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: str
        """
        return self._chain_id

    @chain_id.setter
    def chain_id(self, chain_id):
        """Sets the chain_id of this PortfolioResponsePortfolioItem.


        :param chain_id: The chain_id of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: str
        """

        self._chain_id = chain_id

    @property
    def customer_id(self):
        """Gets the customer_id of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The customer_id of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PortfolioResponsePortfolioItem.


        :param customer_id: The customer_id of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: int
        """

        self._customer_id = customer_id

    @property
    def product_id(self):
        """Gets the product_id of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The product_id of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this PortfolioResponsePortfolioItem.


        :param product_id: The product_id of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def sku_uuid(self):
        """Gets the sku_uuid of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The sku_uuid of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: str
        """
        return self._sku_uuid

    @sku_uuid.setter
    def sku_uuid(self, sku_uuid):
        """Sets the sku_uuid of this PortfolioResponsePortfolioItem.


        :param sku_uuid: The sku_uuid of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: str
        """

        self._sku_uuid = sku_uuid

    @property
    def merchant_id(self):
        """Gets the merchant_id of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The merchant_id of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: int
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this PortfolioResponsePortfolioItem.


        :param merchant_id: The merchant_id of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: int
        """

        self._merchant_id = merchant_id

    @property
    def condition(self):
        """Gets the condition of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The condition of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: int
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this PortfolioResponsePortfolioItem.


        :param condition: The condition of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: int
        """

        self._condition = condition

    @property
    def action(self):
        """Gets the action of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The action of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: int
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PortfolioResponsePortfolioItem.


        :param action: The action of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: int
        """

        self._action = action

    @property
    def action_by(self):
        """Gets the action_by of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The action_by of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: int
        """
        return self._action_by

    @action_by.setter
    def action_by(self, action_by):
        """Sets the action_by of this PortfolioResponsePortfolioItem.


        :param action_by: The action_by of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: int
        """

        self._action_by = action_by

    @property
    def amount(self):
        """Gets the amount of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The amount of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PortfolioResponsePortfolioItem.


        :param amount: The amount of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def expires_at(self):
        """Gets the expires_at of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The expires_at of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this PortfolioResponsePortfolioItem.


        :param expires_at: The expires_at of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: str
        """

        self._expires_at = expires_at

    @property
    def expires_at_time(self):
        """Gets the expires_at_time of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The expires_at_time of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: int
        """
        return self._expires_at_time

    @expires_at_time.setter
    def expires_at_time(self, expires_at_time):
        """Sets the expires_at_time of this PortfolioResponsePortfolioItem.


        :param expires_at_time: The expires_at_time of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: int
        """

        self._expires_at_time = expires_at_time

    @property
    def gain_loss_dollars(self):
        """Gets the gain_loss_dollars of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The gain_loss_dollars of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: int
        """
        return self._gain_loss_dollars

    @gain_loss_dollars.setter
    def gain_loss_dollars(self, gain_loss_dollars):
        """Sets the gain_loss_dollars of this PortfolioResponsePortfolioItem.


        :param gain_loss_dollars: The gain_loss_dollars of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: int
        """

        self._gain_loss_dollars = gain_loss_dollars

    @property
    def gain_loss_percentage(self):
        """Gets the gain_loss_percentage of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The gain_loss_percentage of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: int
        """
        return self._gain_loss_percentage

    @gain_loss_percentage.setter
    def gain_loss_percentage(self, gain_loss_percentage):
        """Sets the gain_loss_percentage of this PortfolioResponsePortfolioItem.


        :param gain_loss_percentage: The gain_loss_percentage of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: int
        """

        self._gain_loss_percentage = gain_loss_percentage

    @property
    def market_value(self):
        """Gets the market_value of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The market_value of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: str
        """
        return self._market_value

    @market_value.setter
    def market_value(self, market_value):
        """Sets the market_value of this PortfolioResponsePortfolioItem.


        :param market_value: The market_value of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: str
        """

        self._market_value = market_value

    @property
    def matched_state(self):
        """Gets the matched_state of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The matched_state of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: int
        """
        return self._matched_state

    @matched_state.setter
    def matched_state(self, matched_state):
        """Sets the matched_state of this PortfolioResponsePortfolioItem.


        :param matched_state: The matched_state of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: int
        """

        self._matched_state = matched_state

    @property
    def purchase_date(self):
        """Gets the purchase_date of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The purchase_date of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: str
        """
        return self._purchase_date

    @purchase_date.setter
    def purchase_date(self, purchase_date):
        """Sets the purchase_date of this PortfolioResponsePortfolioItem.


        :param purchase_date: The purchase_date of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: str
        """

        self._purchase_date = purchase_date

    @property
    def purchase_date_time(self):
        """Gets the purchase_date_time of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The purchase_date_time of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: int
        """
        return self._purchase_date_time

    @purchase_date_time.setter
    def purchase_date_time(self, purchase_date_time):
        """Sets the purchase_date_time of this PortfolioResponsePortfolioItem.


        :param purchase_date_time: The purchase_date_time of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: int
        """

        self._purchase_date_time = purchase_date_time

    @property
    def state(self):
        """Gets the state of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The state of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: int
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PortfolioResponsePortfolioItem.


        :param state: The state of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: int
        """

        self._state = state

    @property
    def status_message(self):
        """Gets the status_message of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The status_message of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this PortfolioResponsePortfolioItem.


        :param status_message: The status_message of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: str
        """

        self._status_message = status_message

    @property
    def text(self):
        """Gets the text of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The text of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PortfolioResponsePortfolioItem.


        :param text: The text of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def created_at(self):
        """Gets the created_at of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The created_at of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PortfolioResponsePortfolioItem.


        :param created_at: The created_at of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def created_at_time(self):
        """Gets the created_at_time of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The created_at_time of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: int
        """
        return self._created_at_time

    @created_at_time.setter
    def created_at_time(self, created_at_time):
        """Sets the created_at_time of this PortfolioResponsePortfolioItem.


        :param created_at_time: The created_at_time of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: int
        """

        self._created_at_time = created_at_time

    @property
    def refer_url(self):
        """Gets the refer_url of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The refer_url of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: str
        """
        return self._refer_url

    @refer_url.setter
    def refer_url(self, refer_url):
        """Sets the refer_url of this PortfolioResponsePortfolioItem.


        :param refer_url: The refer_url of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: str
        """

        self._refer_url = refer_url

    @property
    def can_edit(self):
        """Gets the can_edit of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The can_edit of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this PortfolioResponsePortfolioItem.


        :param can_edit: The can_edit of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: bool
        """

        self._can_edit = can_edit

    @property
    def can_delete(self):
        """Gets the can_delete of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The can_delete of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete):
        """Sets the can_delete of this PortfolioResponsePortfolioItem.


        :param can_delete: The can_delete of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: bool
        """

        self._can_delete = can_delete

    @property
    def tracking(self):
        """Gets the tracking of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The tracking of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: PortfolioResponsePortfolioItemTracking
        """
        return self._tracking

    @tracking.setter
    def tracking(self, tracking):
        """Sets the tracking of this PortfolioResponsePortfolioItem.


        :param tracking: The tracking of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: PortfolioResponsePortfolioItemTracking
        """

        self._tracking = tracking

    @property
    def meta(self):
        """Gets the meta of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The meta of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this PortfolioResponsePortfolioItem.


        :param meta: The meta of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: object
        """

        self._meta = meta

    @property
    def product(self):
        """Gets the product of this PortfolioResponsePortfolioItem.  # noqa: E501


        :return: The product of this PortfolioResponsePortfolioItem.  # noqa: E501
        :rtype: PortfolioResponsePortfolioItemProduct
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this PortfolioResponsePortfolioItem.


        :param product: The product of this PortfolioResponsePortfolioItem.  # noqa: E501
        :type: PortfolioResponsePortfolioItemProduct
        """

        self._product = product

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioResponsePortfolioItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
