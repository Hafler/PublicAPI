# coding: utf-8

"""
    StockX API

    PRERELEASE API - Subject to change before release. Provides access to StockX's public services, allowing end users to query for product and order information.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AddressObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'telephone': 'str',
        'street_address': 'str',
        'extended_address': 'str',
        'locality': 'str',
        'region': 'str',
        'postal_code': 'str',
        'country_code_alpha2': 'str'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'telephone': 'telephone',
        'street_address': 'streetAddress',
        'extended_address': 'extendedAddress',
        'locality': 'locality',
        'region': 'region',
        'postal_code': 'postalCode',
        'country_code_alpha2': 'countryCodeAlpha2'
    }

    def __init__(self, first_name=None, last_name=None, telephone=None, street_address=None, extended_address=None, locality=None, region=None, postal_code=None, country_code_alpha2=None):  # noqa: E501
        """AddressObject - a model defined in Swagger"""  # noqa: E501

        self._first_name = None
        self._last_name = None
        self._telephone = None
        self._street_address = None
        self._extended_address = None
        self._locality = None
        self._region = None
        self._postal_code = None
        self._country_code_alpha2 = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if telephone is not None:
            self.telephone = telephone
        if street_address is not None:
            self.street_address = street_address
        if extended_address is not None:
            self.extended_address = extended_address
        if locality is not None:
            self.locality = locality
        if region is not None:
            self.region = region
        if postal_code is not None:
            self.postal_code = postal_code
        if country_code_alpha2 is not None:
            self.country_code_alpha2 = country_code_alpha2

    @property
    def first_name(self):
        """Gets the first_name of this AddressObject.  # noqa: E501


        :return: The first_name of this AddressObject.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AddressObject.


        :param first_name: The first_name of this AddressObject.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this AddressObject.  # noqa: E501


        :return: The last_name of this AddressObject.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AddressObject.


        :param last_name: The last_name of this AddressObject.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def telephone(self):
        """Gets the telephone of this AddressObject.  # noqa: E501


        :return: The telephone of this AddressObject.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this AddressObject.


        :param telephone: The telephone of this AddressObject.  # noqa: E501
        :type: str
        """

        self._telephone = telephone

    @property
    def street_address(self):
        """Gets the street_address of this AddressObject.  # noqa: E501


        :return: The street_address of this AddressObject.  # noqa: E501
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this AddressObject.


        :param street_address: The street_address of this AddressObject.  # noqa: E501
        :type: str
        """

        self._street_address = street_address

    @property
    def extended_address(self):
        """Gets the extended_address of this AddressObject.  # noqa: E501


        :return: The extended_address of this AddressObject.  # noqa: E501
        :rtype: str
        """
        return self._extended_address

    @extended_address.setter
    def extended_address(self, extended_address):
        """Sets the extended_address of this AddressObject.


        :param extended_address: The extended_address of this AddressObject.  # noqa: E501
        :type: str
        """

        self._extended_address = extended_address

    @property
    def locality(self):
        """Gets the locality of this AddressObject.  # noqa: E501


        :return: The locality of this AddressObject.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this AddressObject.


        :param locality: The locality of this AddressObject.  # noqa: E501
        :type: str
        """

        self._locality = locality

    @property
    def region(self):
        """Gets the region of this AddressObject.  # noqa: E501


        :return: The region of this AddressObject.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AddressObject.


        :param region: The region of this AddressObject.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def postal_code(self):
        """Gets the postal_code of this AddressObject.  # noqa: E501


        :return: The postal_code of this AddressObject.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AddressObject.


        :param postal_code: The postal_code of this AddressObject.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country_code_alpha2(self):
        """Gets the country_code_alpha2 of this AddressObject.  # noqa: E501


        :return: The country_code_alpha2 of this AddressObject.  # noqa: E501
        :rtype: str
        """
        return self._country_code_alpha2

    @country_code_alpha2.setter
    def country_code_alpha2(self, country_code_alpha2):
        """Sets the country_code_alpha2 of this AddressObject.


        :param country_code_alpha2: The country_code_alpha2 of this AddressObject.  # noqa: E501
        :type: str
        """

        self._country_code_alpha2 = country_code_alpha2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
