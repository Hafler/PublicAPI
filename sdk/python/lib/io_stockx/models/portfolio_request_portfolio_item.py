# coding: utf-8

"""
    StockX API

    PRERELEASE API - Subject to change before release. Provides access to StockX's public services, allowing end users to query for product and order information.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PortfolioRequestPortfolioItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'str',
        'expires_at': 'str',
        'matched_with_date': 'str',
        'condition': 'str',
        'action': 'int',
        'sku_uuid': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'expires_at': 'expiresAt',
        'matched_with_date': 'matchedWithDate',
        'condition': 'condition',
        'action': 'action',
        'sku_uuid': 'skuUuid'
    }

    def __init__(self, amount=None, expires_at=None, matched_with_date=None, condition=None, action=None, sku_uuid=None):  # noqa: E501
        """PortfolioRequestPortfolioItem - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._expires_at = None
        self._matched_with_date = None
        self._condition = None
        self._action = None
        self._sku_uuid = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if expires_at is not None:
            self.expires_at = expires_at
        if matched_with_date is not None:
            self.matched_with_date = matched_with_date
        if condition is not None:
            self.condition = condition
        if action is not None:
            self.action = action
        if sku_uuid is not None:
            self.sku_uuid = sku_uuid

    @property
    def amount(self):
        """Gets the amount of this PortfolioRequestPortfolioItem.  # noqa: E501


        :return: The amount of this PortfolioRequestPortfolioItem.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PortfolioRequestPortfolioItem.


        :param amount: The amount of this PortfolioRequestPortfolioItem.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def expires_at(self):
        """Gets the expires_at of this PortfolioRequestPortfolioItem.  # noqa: E501


        :return: The expires_at of this PortfolioRequestPortfolioItem.  # noqa: E501
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this PortfolioRequestPortfolioItem.


        :param expires_at: The expires_at of this PortfolioRequestPortfolioItem.  # noqa: E501
        :type: str
        """

        self._expires_at = expires_at

    @property
    def matched_with_date(self):
        """Gets the matched_with_date of this PortfolioRequestPortfolioItem.  # noqa: E501


        :return: The matched_with_date of this PortfolioRequestPortfolioItem.  # noqa: E501
        :rtype: str
        """
        return self._matched_with_date

    @matched_with_date.setter
    def matched_with_date(self, matched_with_date):
        """Sets the matched_with_date of this PortfolioRequestPortfolioItem.


        :param matched_with_date: The matched_with_date of this PortfolioRequestPortfolioItem.  # noqa: E501
        :type: str
        """

        self._matched_with_date = matched_with_date

    @property
    def condition(self):
        """Gets the condition of this PortfolioRequestPortfolioItem.  # noqa: E501


        :return: The condition of this PortfolioRequestPortfolioItem.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this PortfolioRequestPortfolioItem.


        :param condition: The condition of this PortfolioRequestPortfolioItem.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def action(self):
        """Gets the action of this PortfolioRequestPortfolioItem.  # noqa: E501


        :return: The action of this PortfolioRequestPortfolioItem.  # noqa: E501
        :rtype: int
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PortfolioRequestPortfolioItem.


        :param action: The action of this PortfolioRequestPortfolioItem.  # noqa: E501
        :type: int
        """

        self._action = action

    @property
    def sku_uuid(self):
        """Gets the sku_uuid of this PortfolioRequestPortfolioItem.  # noqa: E501


        :return: The sku_uuid of this PortfolioRequestPortfolioItem.  # noqa: E501
        :rtype: str
        """
        return self._sku_uuid

    @sku_uuid.setter
    def sku_uuid(self, sku_uuid):
        """Sets the sku_uuid of this PortfolioRequestPortfolioItem.


        :param sku_uuid: The sku_uuid of this PortfolioRequestPortfolioItem.  # noqa: E501
        :type: str
        """

        self._sku_uuid = sku_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioRequestPortfolioItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
