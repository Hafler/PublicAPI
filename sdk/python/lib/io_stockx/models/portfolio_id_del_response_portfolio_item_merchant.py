# coding: utf-8

"""
    StockX API

    PRERELEASE API - Subject to change before release. Provides access to StockX's public services, allowing end users to query for product and order information.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PortfolioIdDelResponsePortfolioItemMerchant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'customer_id': 'int',
        'is_robot': 'int',
        'name': 'str',
        'paypal_email': 'str',
        'take': 'float',
        'created_at': 'str',
        'created_at_time': 'int',
        'updated_at': 'str',
        'updated_at_time': 'int'
    }

    attribute_map = {
        'id': 'id',
        'customer_id': 'customerId',
        'is_robot': 'isRobot',
        'name': 'name',
        'paypal_email': 'paypalEmail',
        'take': 'take',
        'created_at': 'createdAt',
        'created_at_time': 'createdAtTime',
        'updated_at': 'updatedAt',
        'updated_at_time': 'updatedAtTime'
    }

    def __init__(self, id=None, customer_id=None, is_robot=None, name=None, paypal_email=None, take=None, created_at=None, created_at_time=None, updated_at=None, updated_at_time=None):  # noqa: E501
        """PortfolioIdDelResponsePortfolioItemMerchant - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._customer_id = None
        self._is_robot = None
        self._name = None
        self._paypal_email = None
        self._take = None
        self._created_at = None
        self._created_at_time = None
        self._updated_at = None
        self._updated_at_time = None
        self.discriminator = None

        self.id = id
        self.customer_id = customer_id
        self.is_robot = is_robot
        self.name = name
        self.paypal_email = paypal_email
        self.take = take
        self.created_at = created_at
        self.created_at_time = created_at_time
        self.updated_at = updated_at
        self.updated_at_time = updated_at_time

    @property
    def id(self):
        """Gets the id of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501


        :return: The id of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PortfolioIdDelResponsePortfolioItemMerchant.


        :param id: The id of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def customer_id(self):
        """Gets the customer_id of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501


        :return: The customer_id of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PortfolioIdDelResponsePortfolioItemMerchant.


        :param customer_id: The customer_id of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :type: int
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def is_robot(self):
        """Gets the is_robot of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501


        :return: The is_robot of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :rtype: int
        """
        return self._is_robot

    @is_robot.setter
    def is_robot(self, is_robot):
        """Sets the is_robot of this PortfolioIdDelResponsePortfolioItemMerchant.


        :param is_robot: The is_robot of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :type: int
        """
        if is_robot is None:
            raise ValueError("Invalid value for `is_robot`, must not be `None`")  # noqa: E501

        self._is_robot = is_robot

    @property
    def name(self):
        """Gets the name of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501


        :return: The name of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PortfolioIdDelResponsePortfolioItemMerchant.


        :param name: The name of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def paypal_email(self):
        """Gets the paypal_email of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501


        :return: The paypal_email of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :rtype: str
        """
        return self._paypal_email

    @paypal_email.setter
    def paypal_email(self, paypal_email):
        """Sets the paypal_email of this PortfolioIdDelResponsePortfolioItemMerchant.


        :param paypal_email: The paypal_email of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :type: str
        """
        if paypal_email is None:
            raise ValueError("Invalid value for `paypal_email`, must not be `None`")  # noqa: E501

        self._paypal_email = paypal_email

    @property
    def take(self):
        """Gets the take of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501


        :return: The take of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :rtype: float
        """
        return self._take

    @take.setter
    def take(self, take):
        """Sets the take of this PortfolioIdDelResponsePortfolioItemMerchant.


        :param take: The take of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :type: float
        """
        if take is None:
            raise ValueError("Invalid value for `take`, must not be `None`")  # noqa: E501

        self._take = take

    @property
    def created_at(self):
        """Gets the created_at of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501


        :return: The created_at of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PortfolioIdDelResponsePortfolioItemMerchant.


        :param created_at: The created_at of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_at_time(self):
        """Gets the created_at_time of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501


        :return: The created_at_time of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :rtype: int
        """
        return self._created_at_time

    @created_at_time.setter
    def created_at_time(self, created_at_time):
        """Sets the created_at_time of this PortfolioIdDelResponsePortfolioItemMerchant.


        :param created_at_time: The created_at_time of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :type: int
        """
        if created_at_time is None:
            raise ValueError("Invalid value for `created_at_time`, must not be `None`")  # noqa: E501

        self._created_at_time = created_at_time

    @property
    def updated_at(self):
        """Gets the updated_at of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501


        :return: The updated_at of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PortfolioIdDelResponsePortfolioItemMerchant.


        :param updated_at: The updated_at of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def updated_at_time(self):
        """Gets the updated_at_time of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501


        :return: The updated_at_time of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :rtype: int
        """
        return self._updated_at_time

    @updated_at_time.setter
    def updated_at_time(self, updated_at_time):
        """Sets the updated_at_time of this PortfolioIdDelResponsePortfolioItemMerchant.


        :param updated_at_time: The updated_at_time of this PortfolioIdDelResponsePortfolioItemMerchant.  # noqa: E501
        :type: int
        """
        if updated_at_time is None:
            raise ValueError("Invalid value for `updated_at_time`, must not be `None`")  # noqa: E501

        self._updated_at_time = updated_at_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioIdDelResponsePortfolioItemMerchant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
