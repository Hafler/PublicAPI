# coding: utf-8

"""
    StockX API

    PRERELEASE API - Subject to change before release. Provides access to StockX's public services, allowing end users to query for product and order information.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from io_stockx.models.product_response_product_children_productid_market import ProductResponseProductChildrenPRODUCTIDMarket  # noqa: F401,E501
from io_stockx.models.product_response_product_media import ProductResponseProductMedia  # noqa: F401,E501
from io_stockx.models.product_response_product_meta import ProductResponseProductMeta  # noqa: F401,E501


class ProductResponseProductChildrenPRODUCTID(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'uuid': 'str',
        'brand': 'str',
        'category': 'str',
        'charity_condition': 'int',
        'colorway': 'str',
        'condition': 'str',
        'country_of_manufacture': 'str',
        'gender': 'str',
        'content_group': 'str',
        'minimum_bid': 'int',
        'media': 'ProductResponseProductMedia',
        'name': 'str',
        'primary_category': 'str',
        'secondary_category': 'str',
        'product_category': 'str',
        'release_date': 'str',
        'retail_price': 'int',
        'shoe': 'str',
        'short_description': 'str',
        'style_id': 'str',
        'ticker_symbol': 'str',
        'title': 'str',
        'data_type': 'str',
        'type': 'int',
        'size_title': 'str',
        'size_descriptor': 'str',
        'size_all_descriptor': 'str',
        'url_key': 'str',
        'year': 'str',
        'shipping_group': 'str',
        'a_lim': 'int',
        'meta': 'ProductResponseProductMeta',
        'parent_id': 'str',
        'parent_uuid': 'str',
        'market': 'ProductResponseProductChildrenPRODUCTIDMarket',
        'size_sort_order': 'int',
        'shoe_size': 'str',
        'upc': 'str'
    }

    attribute_map = {
        'id': 'id',
        'uuid': 'uuid',
        'brand': 'brand',
        'category': 'category',
        'charity_condition': 'charityCondition',
        'colorway': 'colorway',
        'condition': 'condition',
        'country_of_manufacture': 'countryOfManufacture',
        'gender': 'gender',
        'content_group': 'contentGroup',
        'minimum_bid': 'minimumBid',
        'media': 'media',
        'name': 'name',
        'primary_category': 'primaryCategory',
        'secondary_category': 'secondaryCategory',
        'product_category': 'productCategory',
        'release_date': 'releaseDate',
        'retail_price': 'retailPrice',
        'shoe': 'shoe',
        'short_description': 'shortDescription',
        'style_id': 'styleId',
        'ticker_symbol': 'tickerSymbol',
        'title': 'title',
        'data_type': 'dataType',
        'type': 'type',
        'size_title': 'sizeTitle',
        'size_descriptor': 'sizeDescriptor',
        'size_all_descriptor': 'sizeAllDescriptor',
        'url_key': 'urlKey',
        'year': 'year',
        'shipping_group': 'shippingGroup',
        'a_lim': 'aLim',
        'meta': 'meta',
        'parent_id': 'parentId',
        'parent_uuid': 'parentUuid',
        'market': 'market',
        'size_sort_order': 'sizeSortOrder',
        'shoe_size': 'shoeSize',
        'upc': 'upc'
    }

    def __init__(self, id=None, uuid=None, brand=None, category=None, charity_condition=None, colorway=None, condition=None, country_of_manufacture=None, gender=None, content_group=None, minimum_bid=None, media=None, name=None, primary_category=None, secondary_category=None, product_category=None, release_date=None, retail_price=None, shoe=None, short_description=None, style_id=None, ticker_symbol=None, title=None, data_type=None, type=None, size_title=None, size_descriptor=None, size_all_descriptor=None, url_key=None, year=None, shipping_group=None, a_lim=None, meta=None, parent_id=None, parent_uuid=None, market=None, size_sort_order=None, shoe_size=None, upc=None):  # noqa: E501
        """ProductResponseProductChildrenPRODUCTID - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._uuid = None
        self._brand = None
        self._category = None
        self._charity_condition = None
        self._colorway = None
        self._condition = None
        self._country_of_manufacture = None
        self._gender = None
        self._content_group = None
        self._minimum_bid = None
        self._media = None
        self._name = None
        self._primary_category = None
        self._secondary_category = None
        self._product_category = None
        self._release_date = None
        self._retail_price = None
        self._shoe = None
        self._short_description = None
        self._style_id = None
        self._ticker_symbol = None
        self._title = None
        self._data_type = None
        self._type = None
        self._size_title = None
        self._size_descriptor = None
        self._size_all_descriptor = None
        self._url_key = None
        self._year = None
        self._shipping_group = None
        self._a_lim = None
        self._meta = None
        self._parent_id = None
        self._parent_uuid = None
        self._market = None
        self._size_sort_order = None
        self._shoe_size = None
        self._upc = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if uuid is not None:
            self.uuid = uuid
        if brand is not None:
            self.brand = brand
        if category is not None:
            self.category = category
        if charity_condition is not None:
            self.charity_condition = charity_condition
        if colorway is not None:
            self.colorway = colorway
        if condition is not None:
            self.condition = condition
        if country_of_manufacture is not None:
            self.country_of_manufacture = country_of_manufacture
        if gender is not None:
            self.gender = gender
        if content_group is not None:
            self.content_group = content_group
        if minimum_bid is not None:
            self.minimum_bid = minimum_bid
        if media is not None:
            self.media = media
        if name is not None:
            self.name = name
        if primary_category is not None:
            self.primary_category = primary_category
        if secondary_category is not None:
            self.secondary_category = secondary_category
        if product_category is not None:
            self.product_category = product_category
        if release_date is not None:
            self.release_date = release_date
        if retail_price is not None:
            self.retail_price = retail_price
        if shoe is not None:
            self.shoe = shoe
        if short_description is not None:
            self.short_description = short_description
        if style_id is not None:
            self.style_id = style_id
        if ticker_symbol is not None:
            self.ticker_symbol = ticker_symbol
        if title is not None:
            self.title = title
        if data_type is not None:
            self.data_type = data_type
        if type is not None:
            self.type = type
        if size_title is not None:
            self.size_title = size_title
        if size_descriptor is not None:
            self.size_descriptor = size_descriptor
        if size_all_descriptor is not None:
            self.size_all_descriptor = size_all_descriptor
        if url_key is not None:
            self.url_key = url_key
        if year is not None:
            self.year = year
        if shipping_group is not None:
            self.shipping_group = shipping_group
        if a_lim is not None:
            self.a_lim = a_lim
        if meta is not None:
            self.meta = meta
        if parent_id is not None:
            self.parent_id = parent_id
        if parent_uuid is not None:
            self.parent_uuid = parent_uuid
        if market is not None:
            self.market = market
        if size_sort_order is not None:
            self.size_sort_order = size_sort_order
        if shoe_size is not None:
            self.shoe_size = shoe_size
        if upc is not None:
            self.upc = upc

    @property
    def id(self):
        """Gets the id of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The id of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductResponseProductChildrenPRODUCTID.


        :param id: The id of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def uuid(self):
        """Gets the uuid of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The uuid of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ProductResponseProductChildrenPRODUCTID.


        :param uuid: The uuid of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def brand(self):
        """Gets the brand of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The brand of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this ProductResponseProductChildrenPRODUCTID.


        :param brand: The brand of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def category(self):
        """Gets the category of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The category of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ProductResponseProductChildrenPRODUCTID.


        :param category: The category of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def charity_condition(self):
        """Gets the charity_condition of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The charity_condition of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: int
        """
        return self._charity_condition

    @charity_condition.setter
    def charity_condition(self, charity_condition):
        """Sets the charity_condition of this ProductResponseProductChildrenPRODUCTID.


        :param charity_condition: The charity_condition of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: int
        """

        self._charity_condition = charity_condition

    @property
    def colorway(self):
        """Gets the colorway of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The colorway of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._colorway

    @colorway.setter
    def colorway(self, colorway):
        """Sets the colorway of this ProductResponseProductChildrenPRODUCTID.


        :param colorway: The colorway of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._colorway = colorway

    @property
    def condition(self):
        """Gets the condition of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The condition of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ProductResponseProductChildrenPRODUCTID.


        :param condition: The condition of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def country_of_manufacture(self):
        """Gets the country_of_manufacture of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The country_of_manufacture of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._country_of_manufacture

    @country_of_manufacture.setter
    def country_of_manufacture(self, country_of_manufacture):
        """Sets the country_of_manufacture of this ProductResponseProductChildrenPRODUCTID.


        :param country_of_manufacture: The country_of_manufacture of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._country_of_manufacture = country_of_manufacture

    @property
    def gender(self):
        """Gets the gender of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The gender of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this ProductResponseProductChildrenPRODUCTID.


        :param gender: The gender of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def content_group(self):
        """Gets the content_group of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The content_group of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._content_group

    @content_group.setter
    def content_group(self, content_group):
        """Sets the content_group of this ProductResponseProductChildrenPRODUCTID.


        :param content_group: The content_group of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._content_group = content_group

    @property
    def minimum_bid(self):
        """Gets the minimum_bid of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The minimum_bid of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: int
        """
        return self._minimum_bid

    @minimum_bid.setter
    def minimum_bid(self, minimum_bid):
        """Sets the minimum_bid of this ProductResponseProductChildrenPRODUCTID.


        :param minimum_bid: The minimum_bid of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: int
        """

        self._minimum_bid = minimum_bid

    @property
    def media(self):
        """Gets the media of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The media of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: ProductResponseProductMedia
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this ProductResponseProductChildrenPRODUCTID.


        :param media: The media of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: ProductResponseProductMedia
        """

        self._media = media

    @property
    def name(self):
        """Gets the name of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The name of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductResponseProductChildrenPRODUCTID.


        :param name: The name of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def primary_category(self):
        """Gets the primary_category of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The primary_category of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._primary_category

    @primary_category.setter
    def primary_category(self, primary_category):
        """Sets the primary_category of this ProductResponseProductChildrenPRODUCTID.


        :param primary_category: The primary_category of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._primary_category = primary_category

    @property
    def secondary_category(self):
        """Gets the secondary_category of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The secondary_category of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._secondary_category

    @secondary_category.setter
    def secondary_category(self, secondary_category):
        """Sets the secondary_category of this ProductResponseProductChildrenPRODUCTID.


        :param secondary_category: The secondary_category of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._secondary_category = secondary_category

    @property
    def product_category(self):
        """Gets the product_category of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The product_category of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._product_category

    @product_category.setter
    def product_category(self, product_category):
        """Sets the product_category of this ProductResponseProductChildrenPRODUCTID.


        :param product_category: The product_category of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._product_category = product_category

    @property
    def release_date(self):
        """Gets the release_date of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The release_date of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this ProductResponseProductChildrenPRODUCTID.


        :param release_date: The release_date of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._release_date = release_date

    @property
    def retail_price(self):
        """Gets the retail_price of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The retail_price of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: int
        """
        return self._retail_price

    @retail_price.setter
    def retail_price(self, retail_price):
        """Sets the retail_price of this ProductResponseProductChildrenPRODUCTID.


        :param retail_price: The retail_price of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: int
        """

        self._retail_price = retail_price

    @property
    def shoe(self):
        """Gets the shoe of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The shoe of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._shoe

    @shoe.setter
    def shoe(self, shoe):
        """Sets the shoe of this ProductResponseProductChildrenPRODUCTID.


        :param shoe: The shoe of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._shoe = shoe

    @property
    def short_description(self):
        """Gets the short_description of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The short_description of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ProductResponseProductChildrenPRODUCTID.


        :param short_description: The short_description of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def style_id(self):
        """Gets the style_id of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The style_id of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._style_id

    @style_id.setter
    def style_id(self, style_id):
        """Sets the style_id of this ProductResponseProductChildrenPRODUCTID.


        :param style_id: The style_id of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._style_id = style_id

    @property
    def ticker_symbol(self):
        """Gets the ticker_symbol of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The ticker_symbol of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._ticker_symbol

    @ticker_symbol.setter
    def ticker_symbol(self, ticker_symbol):
        """Sets the ticker_symbol of this ProductResponseProductChildrenPRODUCTID.


        :param ticker_symbol: The ticker_symbol of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._ticker_symbol = ticker_symbol

    @property
    def title(self):
        """Gets the title of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The title of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProductResponseProductChildrenPRODUCTID.


        :param title: The title of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def data_type(self):
        """Gets the data_type of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The data_type of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ProductResponseProductChildrenPRODUCTID.


        :param data_type: The data_type of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def type(self):
        """Gets the type of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The type of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductResponseProductChildrenPRODUCTID.


        :param type: The type of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def size_title(self):
        """Gets the size_title of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The size_title of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._size_title

    @size_title.setter
    def size_title(self, size_title):
        """Sets the size_title of this ProductResponseProductChildrenPRODUCTID.


        :param size_title: The size_title of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._size_title = size_title

    @property
    def size_descriptor(self):
        """Gets the size_descriptor of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The size_descriptor of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._size_descriptor

    @size_descriptor.setter
    def size_descriptor(self, size_descriptor):
        """Sets the size_descriptor of this ProductResponseProductChildrenPRODUCTID.


        :param size_descriptor: The size_descriptor of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._size_descriptor = size_descriptor

    @property
    def size_all_descriptor(self):
        """Gets the size_all_descriptor of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The size_all_descriptor of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._size_all_descriptor

    @size_all_descriptor.setter
    def size_all_descriptor(self, size_all_descriptor):
        """Sets the size_all_descriptor of this ProductResponseProductChildrenPRODUCTID.


        :param size_all_descriptor: The size_all_descriptor of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._size_all_descriptor = size_all_descriptor

    @property
    def url_key(self):
        """Gets the url_key of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The url_key of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._url_key

    @url_key.setter
    def url_key(self, url_key):
        """Sets the url_key of this ProductResponseProductChildrenPRODUCTID.


        :param url_key: The url_key of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._url_key = url_key

    @property
    def year(self):
        """Gets the year of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The year of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this ProductResponseProductChildrenPRODUCTID.


        :param year: The year of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def shipping_group(self):
        """Gets the shipping_group of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The shipping_group of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._shipping_group

    @shipping_group.setter
    def shipping_group(self, shipping_group):
        """Sets the shipping_group of this ProductResponseProductChildrenPRODUCTID.


        :param shipping_group: The shipping_group of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._shipping_group = shipping_group

    @property
    def a_lim(self):
        """Gets the a_lim of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The a_lim of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: int
        """
        return self._a_lim

    @a_lim.setter
    def a_lim(self, a_lim):
        """Sets the a_lim of this ProductResponseProductChildrenPRODUCTID.


        :param a_lim: The a_lim of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: int
        """

        self._a_lim = a_lim

    @property
    def meta(self):
        """Gets the meta of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The meta of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: ProductResponseProductMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this ProductResponseProductChildrenPRODUCTID.


        :param meta: The meta of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: ProductResponseProductMeta
        """

        self._meta = meta

    @property
    def parent_id(self):
        """Gets the parent_id of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The parent_id of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ProductResponseProductChildrenPRODUCTID.


        :param parent_id: The parent_id of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def parent_uuid(self):
        """Gets the parent_uuid of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The parent_uuid of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._parent_uuid

    @parent_uuid.setter
    def parent_uuid(self, parent_uuid):
        """Sets the parent_uuid of this ProductResponseProductChildrenPRODUCTID.


        :param parent_uuid: The parent_uuid of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._parent_uuid = parent_uuid

    @property
    def market(self):
        """Gets the market of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The market of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: ProductResponseProductChildrenPRODUCTIDMarket
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this ProductResponseProductChildrenPRODUCTID.


        :param market: The market of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: ProductResponseProductChildrenPRODUCTIDMarket
        """

        self._market = market

    @property
    def size_sort_order(self):
        """Gets the size_sort_order of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The size_sort_order of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: int
        """
        return self._size_sort_order

    @size_sort_order.setter
    def size_sort_order(self, size_sort_order):
        """Sets the size_sort_order of this ProductResponseProductChildrenPRODUCTID.


        :param size_sort_order: The size_sort_order of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: int
        """

        self._size_sort_order = size_sort_order

    @property
    def shoe_size(self):
        """Gets the shoe_size of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The shoe_size of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._shoe_size

    @shoe_size.setter
    def shoe_size(self, shoe_size):
        """Sets the shoe_size of this ProductResponseProductChildrenPRODUCTID.


        :param shoe_size: The shoe_size of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._shoe_size = shoe_size

    @property
    def upc(self):
        """Gets the upc of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501


        :return: The upc of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :rtype: str
        """
        return self._upc

    @upc.setter
    def upc(self, upc):
        """Sets the upc of this ProductResponseProductChildrenPRODUCTID.


        :param upc: The upc of this ProductResponseProductChildrenPRODUCTID.  # noqa: E501
        :type: str
        """

        self._upc = upc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductResponseProductChildrenPRODUCTID):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
